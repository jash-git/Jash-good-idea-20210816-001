168168
OpenCV演算法精解：基於Python與C++ [電子書]

資料來源: https://www.gpdf.net/4707.html

GITHUB: 

目录介绍：
1 OpenCV入门

1.1 初识OpenCV

1.1.1 OpenCV的模块简介

1.1.2 OpenCV 2.4.13与3.2版本的区别

1.2 部署OpenCV

1.2.1 在Visual Studio 2015中 配置OpenCV

1.2.2 OpenCV 2.X C API的第一个示例

1.2.3 OpenCV 3.X C API的第一个示例

1.2.4 在Anaconda 2中配置OpenCV

1.2.5 OpenCV 2.X Python API的第一个示例

1.2.6 OpenCV 3.X Python API的第一个示例

2 图像数字化

2.1 认识Numpy中的ndarray

2.1.1 构造ndarray对象

2.1.2 访问ndarray中的值

2.2 认识OpenCV中的Mat类

2.2.1 初识Mat

2.2.2 构造单通道Mat对象

2.2.3 获得单通道Mat的基本信息

2.2.4 访问单通道Mat对象中的值

2.2.5 向量类Vec

2.2.6 构造多通道Mat对象

2.2.7 访问多通道Mat对象中的值

2.2.8 获得Mat中某一区域的值

2.3 矩阵的运算

2.3.1 加法运算

2.3.2 减法运算

2.3.3 点乘运算

2.3.4 点除运算

2.3.5 乘法运算

2.3.6 其他运算

2.4 灰度图像数字化

2.4.1 概述

2.4.2 将灰度图像转换为Mat

2.4.3 将灰度图转换为ndarray

2.5 彩色图像数字化

2.5.1 将RGB彩色图像转换为多通道Mat

2.5.2 将RGB彩色图转换为三维的ndarray

2.6 参考文献

3 几何变换

3.1 仿射变换

3.1.1 平移

3.1.2 放大和缩小

3.1.3 旋转

3.1.4 计算仿射矩阵

3.1.5 插值算法

3.1.6 Python实现

3.1.7 C 实现

3.1.8 旋转函数rotate(OpenCV3.X新特性)

3.2 投影变换

3.2.1 原理详解

3.2.2 Python实现

3.2.3 C 实现

3.3 极坐标变换

3.3.1 原理详解

3.3.2 Python实现

3.3.3 C 实现

3.3.4 线性极坐标函数linearPolar(OpenCV 3.X新特性)

3.3.5 对数极坐标函数logPolar(OpenCV 3.X新特性)

3.4 参考文献

4 对比度增强

4.1 灰度直方图

4.1.1 什么是灰度直方图

4.1.2 Python及C 实现

4.2 线性变换

4.2.1 原理详解

4.2.2 Python实现

4.2.3 C 实现

4.3 直方图正规化

4.3.1 原理详解

4.3.2 Python实现

4.3.3 C 实现

4.3.4 正规化函数normalize

4.4 伽马变换

4.4.1 原理详解

4.4.2 Python实现

4.4.3 C 实现

4.5 全局直方图均衡化

4.5.1 原理详解

4.5.2 Python实现

4.5.3 C 实现

4.6 限制对比度的自适应直方图均衡化

4.6.1 原理详解

4.6.2 代码实现

4.7 参考文献

5 图像平滑

5.1 二维离散卷积

5.1.1 卷积定义及矩阵形式

5.1.2 可分离卷积核

5.1.3 离散卷积的性质

5.2 高斯平滑

5.2.1 高斯卷积核的构建及分离性

5.2.2 高斯卷积核的二项式近似

5.2.3 Python实现

5.2.4 C 实现

5.3 均值平滑

5.3.1 均值卷积核的构建及分离性

5.3.2 快速均值平滑

5.3.3 Python实现

5.3.4 C 实现

5.4 中值平滑

5.4.1 原理详解

5.4.2 Python实现

5.4.3 C 实现

5.5 双边滤波

5.5.1 原理详解

5.5.2 Python实现

5.5.3 C 实现

5.6 联合双边滤波

5.6.1 原理详解

5.6.2 Python实现

5.6.3 C 实现

5.7 导向滤波

5.7.1 原理详解

5.7.2 Python实现

5.7.3 快速导向滤波

5.7.4 C 实现

5.8 参考文献

6 阈值分割

6.1 方法概述

6.1.1 全局阈值分割

6.1.2 阈值函数threshold(OpenCV3.X新特性)

6.1.3 局部阈值分割

6.2 直方图技术法

6.2.1 原理详解

6.2.2 Python实现

6.2.3 C 实现

6.3 熵算法

6.3.1 原理详解

6.3.2 代码实现

6.4 Otsu阈值处理

6.4.1 原理详解

6.4.2 Python实现

6.4.3 C 实现

6.5 自适应阈值

6.5.1 原理详解

6.5.2 Python实现

6.5.3 C 实现

6.6 二值图的逻辑运算

6.6.1 “与”和“或”运算

6.6.2 Python实现

6.6.3 C 实现

6.7 参考文献

7 形态学处理

7.1 腐蚀

7.1.1 原理详解

7.1.2 实现代码及效果

7.2 膨胀

7.2.1 原理详解

7.2.2 Python实现

7.2.3 C 实现

7.3 开运算和闭运算

7.3.1 原理详解

7.3.2 Python实现

7.4 其他形态学处理操作

7.4.1 顶帽变换和底帽变换

7.4.2 形态学梯度

7.4.3 C 实现

8 边缘检测

8.1 Roberts算子

8.1.1 原理详解

8.1.2 Python实现

8.1.3 C 实现

8.2 Prewitt边缘检测

8.2.1 Prewitt算子及分离性

8.2.2 Python实现

8.2.3 C 实现

8.3 Sobel边缘检测

8.3.1 Sobel算子及分离性

8.3.2 构建高阶的Sobel算子

8.3.3 Python实现

8.3.4 C 实现

8.4 Scharr算子

8.4.1 原理详解

8.4.2 Python实现

8.4.3 C 实现

8.5 Kirsch算子和Robinson算子

8.5.1 原理详解

8.5.2 代码实现及效果

8.6 Canny边缘检测

8.6.1 原理详解

8.6.2 Python实现

8.6.3 C 实现

8.7 Laplacian算子

8.7.1 原理详解

8.7.2 Python实现

8.7.3 C 实现

8.8 高斯拉普拉斯(LoG)边缘检测

8.8.1 原理详解

8.8.2 Python实现

8.8.3 C 实现

8.9 高斯差分(DoG)边缘检测

8.9.1 高斯拉普拉斯与高斯差分的关系

8.9.2 Python实现

8.9.3 C 实现

8.10 Marr-Hildreth边缘检测

8.10.1 算法步骤详解

8.10.2 Pyton实现

8.10.3 C 实现

8.11 参考文献

9 几何形状的检测和拟合

9.1 点集的最小外包

9.1.1 最小外包旋转矩形

9.1.2 旋转矩形的4个顶点(OpenCV 3.X新特性)

9.1.3 最小外包圆

9.1.4 最小外包直立矩形(OpenCV 3.X新特性)

9.1.5 最小凸包

9.1.6 最小外包三角形( OpenCV 3.X新特性)

9.2 霍夫直线检测

9.2.1 原理详解

9.2.2 Python实现

9.2.3 C 实现

9.3 霍夫圆检测

9.3.1 标准霍夫圆检测

9.3.2 Python实现

9.3.3 基于梯度的霍夫圆检测

9.3.4 基于梯度的霍夫圆检测函数HoughCircles

9.4 轮廓

9.4.1 查找、绘制轮廓

9.4.2 外包、拟合轮廓

9.4.3 轮廓的周长和面积

9.4.4 点和轮廓的位置关系

9.4.5 轮廓的凸包缺陷

9.5 参考文献

10 傅里叶变换

10.1 二维离散的傅里叶(逆)变换

10.1.1 数学理解篇

10.1.2 快速傅里叶变换

10.1.3 C 实现

10.1.4 Python实现

10.2 傅里叶幅度谱与相位谱

10.2.1 基础知识

10.2.2 Python实现

10.2.3 C 实现

10.3 谱残差显著性检测

10.3.1 原理详解

10.3.2 Python实现

10.3.3 C 实现

10.4 卷积与傅里叶变换的关系

10.4.1 卷积定理

10.4.2 Python实现

10.5 通过快速傅里叶变换计算卷积

10.5.1 步骤详解

10.5.2 Python实现

10.5.3 C 实现

10.6 参考文献

11 频率域滤波

11.1 概述及原理详解

11.2 低通滤波和高通滤波

11.2.1 三种常用的低通滤波器

11.2.2 低通滤波的C 实现

11.2.3 低通滤波的Python实现

11.2.4 三种常用的高通滤波器

11.3 带通和带阻滤波

11.3.1 三种常用的带通滤波器

11.3.2 三种常用的带阻滤波器

11.4 自定义滤波器

11.4.1 原理详解

11.4.2 C 实现

11.5 同态滤波

11.5.1 原理详解

11.5.2 Python实现

11.6 参考文献

12 色彩空间

12.1 常见的色彩空间

12.1.1 RGB色彩空间

12.1.2 HSV色彩空间

12.1.3 HLS色彩空间

12.2 调整彩色图像的饱和度和亮度

12.2.1 Python实现

12.2.2 C 实现

目錄介紹：
1 OpenCV入門
1.1 初識OpenCV
1.1.1 OpenCV的模組簡介
1.1.2 OpenCV 2.4.13與3.2版本的區別
1.2 部署OpenCV
1.2.1 在Visual Studio 2015中 配置OpenCV
1.2.2 OpenCV 2.X C API的第一個示例
1.2.3 OpenCV 3.X C API的第一個示例
1.2.4 在Anaconda 2中配置OpenCV
1.2.5 OpenCV 2.X Python API的第一個示例
1.2.6 OpenCV 3.X Python API的第一個示例
2 圖像數位化
2.1 認識Numpy中的ndarray
2.1.1 構造ndarray物件
2.1.2 訪問ndarray中的值
2.2 認識OpenCV中的Mat類
2.2.1 初識Mat
2.2.2 構造單通道Mat物件
2.2.3 獲得單通道Mat的基本資訊
2.2.4 訪問單通道Mat物件中的值
2.2.5 向量類Vec
2.2.6 構造多通道Mat物件
2.2.7 訪問多通道Mat物件中的值
2.2.8 獲得Mat中某一區域的值
2.3 矩陣的運算
2.3.1 加法運算
2.3.2 減法運算
2.3.3 點乘運算
2.3.4 點除運算
2.3.5 乘法運算
2.3.6 其他運算
2.4 灰度圖像數位化
2.4.1 概述
2.4.2 將灰度圖像轉換為Mat
2.4.3 將灰度圖轉換為ndarray
2.5 彩色圖像數位化
2.5.1 將RGB彩色圖像轉換為多通道Mat
2.5.2 將RGB彩色圖轉換為三維的ndarray
2.6 參考文獻
3 幾何變換
3.1 仿射變換
3.1.1 平移
3.1.2 放大和縮小
3.1.3 旋轉
3.1.4 計算仿射矩陣
3.1.5 插值演算法
3.1.6 Python實現
3.1.7 C 實現
3.1.8 旋轉函數rotate(OpenCV3.X新特性)
3.2 投影變換
3.2.1 原理詳解
3.2.2 Python實現
3.2.3 C 實現
3.3 極座標變換
3.3.1 原理詳解
3.3.2 Python實現
3.3.3 C 實現
3.3.4 線性極座標函數linearPolar(OpenCV 3.X新特性)
3.3.5 對數極座標函數logPolar(OpenCV 3.X新特性)
3.4 參考文獻
4 對比度增強
4.1 灰度長條圖
4.1.1 什麼是灰度長條圖
4.1.2 Python及C 實現
4.2 線性變換
4.2.1 原理詳解
4.2.2 Python實現
4.2.3 C 實現
4.3 長條圖正規化
4.3.1 原理詳解
4.3.2 Python實現
4.3.3 C 實現
4.3.4 正規化函數normalize
4.4 伽馬變換
4.4.1 原理詳解
4.4.2 Python實現
4.4.3 C 實現
4.5 全域長條圖均衡化
4.5.1 原理詳解
4.5.2 Python實現
4.5.3 C 實現
4.6 限制對比度的自我調整長條圖均衡化
4.6.1 原理詳解
4.6.2 代碼實現
4.7 參考文獻
5 圖像平滑
5.1 二維離散卷積
5.1.1 卷積定義及矩陣形式
5.1.2 可分離卷積核
5.1.3 離散卷積的性質
5.2 高斯平滑
5.2.1 高斯卷積核的構建及分離性
5.2.2 高斯卷積核的二項式近似
5.2.3 Python實現
5.2.4 C 實現
5.3 均值平滑
5.3.1 均值卷積核的構建及分離性
5.3.2 快速均值平滑
5.3.3 Python實現
5.3.4 C 實現
5.4 中值平滑
5.4.1 原理詳解
5.4.2 Python實現
5.4.3 C 實現
5.5 雙邊濾波
5.5.1 原理詳解
5.5.2 Python實現
5.5.3 C 實現
5.6 聯合雙邊濾波
5.6.1 原理詳解
5.6.2 Python實現
5.6.3 C 實現
5.7 導向濾波
5.7.1 原理詳解
5.7.2 Python實現
5.7.3 快速導向濾波
5.7.4 C 實現
5.8 參考文獻
6 閾值分割
6.1 方法概述
6.1.1 全域閾值分割
6.1.2 閾值函數threshold(OpenCV3.X新特性)
6.1.3 局部閾值分割
6.2 長條圖技術法
6.2.1 原理詳解
6.2.2 Python實現
6.2.3 C 實現
6.3 熵演算法
6.3.1 原理詳解
6.3.2 代碼實現
6.4 Otsu閾值處理
6.4.1 原理詳解
6.4.2 Python實現
6.4.3 C 實現
6.5 自我調整閾值
6.5.1 原理詳解
6.5.2 Python實現
6.5.3 C 實現
6.6 二值圖的邏輯運算
6.6.1 “與”和“或”運算
6.6.2 Python實現
6.6.3 C 實現
6.7 參考文獻
7 形態學處理
7.1 腐蝕
7.1.1 原理詳解
7.1.2 實現代碼及效果
7.2 膨脹
7.2.1 原理詳解
7.2.2 Python實現
7.2.3 C 實現
7.3 開運算和閉運算
7.3.1 原理詳解
7.3.2 Python實現
7.4 其他形態學處理操作
7.4.1 頂帽變換和底帽變換
7.4.2 形態學梯度
7.4.3 C 實現
8 邊緣檢測
8.1 Roberts運算元
8.1.1 原理詳解
8.1.2 Python實現
8.1.3 C 實現
8.2 Prewitt邊緣檢測
8.2.1 Prewitt運算元及分離性
8.2.2 Python實現
8.2.3 C 實現
8.3 Sobel邊緣檢測
8.3.1 Sobel運算元及分離性
8.3.2 構建高階的Sobel運算元
8.3.3 Python實現
8.3.4 C 實現
8.4 Scharr運算元
8.4.1 原理詳解
8.4.2 Python實現
8.4.3 C 實現
8.5 Kirsch運算元和Robinson運算元
8.5.1 原理詳解
8.5.2 代碼實現及效果
8.6 Canny邊緣檢測
8.6.1 原理詳解
8.6.2 Python實現
8.6.3 C 實現
8.7 Laplacian運算元
8.7.1 原理詳解
8.7.2 Python實現
8.7.3 C 實現
8.8 高斯拉普拉斯(LoG)邊緣檢測
8.8.1 原理詳解
8.8.2 Python實現
8.8.3 C 實現
8.9 高斯差分(DoG)邊緣檢測
8.9.1 高斯拉普拉斯與高斯差分的關係
8.9.2 Python實現
8.9.3 C 實現
8.10 Marr-Hildreth邊緣檢測
8.10.1 演算法步驟詳解
8.10.2 Pyton實現
8.10.3 C 實現
8.11 參考文獻
9 幾何形狀的檢測和擬合
9.1 點集的最小外包
9.1.1 最小外包旋轉矩形
9.1.2 旋轉矩形的4個頂點(OpenCV 3.X新特性)
9.1.3 最小外包圓
9.1.4 最小外包直立矩形(OpenCV 3.X新特性)
9.1.5 最小凸包
9.1.6 最小外包三角形( OpenCV 3.X新特性)
9.2 霍夫直線檢測
9.2.1 原理詳解
9.2.2 Python實現
9.2.3 C 實現
9.3 霍夫圓檢測
9.3.1 標準霍夫圓檢測
9.3.2 Python實現
9.3.3 基於梯度的霍夫圓檢測
9.3.4 基於梯度的霍夫圓檢測函數HoughCircles
9.4 輪廓
9.4.1 查找、繪製輪廓
9.4.2 外包、擬合輪廓
9.4.3 輪廓的周長和面積
9.4.4 點和輪廓的位置關係
9.4.5 輪廓的凸包缺陷
9.5 參考文獻
10 傅裡葉變換
10.1 二維離散的傅裡葉(逆)變換
10.1.1 數學理解篇
10.1.2 快速傅裡葉變換
10.1.3 C 實現
10.1.4 Python實現
10.2 傅裡葉幅度譜與相位譜
10.2.1 基礎知識
10.2.2 Python實現
10.2.3 C 實現
10.3 譜殘差顯著性檢測
10.3.1 原理詳解
10.3.2 Python實現
10.3.3 C 實現
10.4 卷積與傅裡葉變換的關係
10.4.1 卷積定理
10.4.2 Python實現
10.5 通過快速傅裡葉變換計算卷積
10.5.1 步驟詳解
10.5.2 Python實現
10.5.3 C 實現
10.6 參考文獻
11 頻率域濾波
11.1 概述及原理詳解
11.2 低通濾波和高通濾波
11.2.1 三種常用的低通濾波器
11.2.2 低通濾波的C 實現
11.2.3 低通濾波的Python實現
11.2.4 三種常用的高通濾波器
11.3 帶通和帶阻濾波
11.3.1 三種常用的帶通濾波器
11.3.2 三種常用的帶阻濾波器
11.4 自訂濾波器
11.4.1 原理詳解
11.4.2 C 實現
11.5 同態濾波
11.5.1 原理詳解
11.5.2 Python實現
11.6 參考文獻
12 色彩空間
12.1 常見的色彩空間
12.1.1 RGB色彩空間
12.1.2 HSV色彩空間
12.1.3 HLS色彩空間
12.2 調整彩色圖像的飽和度和亮度
12.2.1 Python實現
12.2.2 C 實現

