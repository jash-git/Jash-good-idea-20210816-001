var _extends=Object.assign||function(t){
for(var e=1;e<arguments.length;e++){
var a=arguments[e];
for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r]);
}
return t;
};
define("pages_new/common_share/video/player/player_store.js",["common/comm_report.js"],function(t){
"use strict";
var e=t("common/comm_report.js");
return{
name:"mp-video-player",
namespaced:!0,
state:function(){
return{
errType:0,
errCode:0,
errMsg:"",
status:"init",
subStatus:"init",
fullscreenStatus:0,
seekingStatus:0,
refreshBtnStatus:0,
topStickyInfoStatus:0,
loadingStatus:0,
controlBarStatus:0,
coverStatus:1,
midPlayStatus:0,
resolutionEntryStatus:0,
subSettingStatus:0,
accessPlayBtnStatus:0,
touchOprStatus:0,
likeCmtStatus:0,
orientationStatus:0,
banOprStatus:0,
progressBarMark:[],
commonReportData:{
Vid:"",
BizUin:0,
MsgId:0,
ItemIdx:0,
PlayerType:0,
Scene:0,
SubScene:0,
ItemShowType:0,
EnterId:0,
SessionId:"",
ChannelId:"",
ReloadId:"",
ReloadSeq:0,
Duration:0,
OrStatus:0,
PageUrl:"",
VideoUrl:"",
IsFans:0
},
enter23439ReportExData:{
IsContinue:0,
IsWatchMore:0,
UserDanMuFlag:0,
isDanShow:0
},
play23440ReportExData:{
DeviceModel:"",
DeviceBrand:"",
OsName:"",
OsVersion:"",
NetType:0,
ScreenHeight:0,
ScreenWidth:0,
MiaoKai:0,
PlayType:0
},
perf23442ReportExData:{
DeviceModel:"",
DeviceBrand:"",
OsName:"",
OsVersion:"",
NetType:0,
ScreenHeight:0,
ScreenWidth:0,
MiaoKai:0,
EventType:0,
EventTime:0,
PreloadType:0,
Definition:0,
VideoWidth:0,
VideoHeight:0,
BufferTime:0,
BufferType:0,
DefinitionBefore:0,
VideoWidthBefore:0,
VideoHeightBefore:0,
PlayErrType:0,
Traffic:0
},
leave23443ReportExData:{
EventType:0,
EventTime:0,
PlayTime:0,
StayTime:0,
PagePlayTime:0,
PageStayTime:0,
ImmersivePlayTime:0,
ImmersiveStayTime:0
},
op23444ReportExData:{
EventType:0,
EventTime:0,
FullscreenType:0,
PauseTime:0,
BarBefore:"",
BarAfter:"",
SpeedBefore:"",
SpeedAfter:"",
DefinitionBefore:"",
DefinitionAfter:""
},
reload23445ReportExData:{
EventType:0,
FullscreenType:0,
WatchMoreSet:0,
ContinueBreakReason:0,
RecVid:"",
RecBizUin:0,
RecMsgId:0,
RecItemIdx:0,
RecSeq:0,
RecType:0,
SortId:0,
RecInfo:""
},
ad23446ReportExData:{
EventType:0,
EventTime:0,
Location:0
}
};
},
mutations:{
setError:function(t,e){
t.errType=e.type,t.errCode=e.code,t.errMsg=e.msg,t.refreshBtnStatus=e.refresh;
},
setTopStickyInfoStatus:function(t,e){
t.topStickyInfoStatus=e.status;
},
setFullscreenStatus:function(t,e){
t.fullscreenStatus=e.status,window.__video_fullscreen__=!!e.status;
},
setSeekingStatus:function(t,e){
t.seekingStatus=e.status;
},
setStatus:function(t,e){
t.status=e.status,t.subStatus=e.subStatus;
},
setLoadingStatus:function(t,e){
t.loadingStatus=e.status;
},
setControlBarStatus:function(t,e){
t.controlBarStatus=e.status;
},
setCoverStatus:function(t,e){
t.coverStatus=e.status;
},
setMidPlayStatus:function(t,e){
t.midPlayStatus=e.status;
},
setResolutionEntryStatus:function(t,e){
t.resolutionEntryStatus=e.status;
},
setSubSettingStatus:function(t,e){
t.subSettingStatus=e.status;
},
setAccessPlayBtnStatus:function(t,e){
t.accessPlayBtnStatus=e.status;
},
setTouchOprStatus:function(t,e){
t.touchOprStatus=e.status;
},
setLikeCmtStatus:function(t,e){
t.likeCmtStatus=e.status;
},
setOrientationStatus:function(t,e){
t.orientationStatus=e.status;
},
setBanOprStatus:function(t,e){
t.banOprStatus=e.status;
},
addProgressBarMark:function(t,e){
t.progressBarMark=[].concat(t.progressBarMark,e.value);
},
removeProgressBarMark:function(t,e){
for(var a=t.progressBarMark.length-1;a>-1;a--){
var r=t.progressBarMark[a];
r.id===e.id&&t.progressBarMark.splice(a,1);
}
},
clearProgressBarMark:function(t){
t.progressBarMark=[];
},
setCommonReportData:function(t,e){
t.commonReportData=_extends({},t.commonReportData,e);
},
setEnter23439ReportExData:function(t,e){
t.enter23439ReportExData=_extends({},t.enter23439ReportExData,e);
},
setPlay23440ReportExData:function(t,e){
t.play23440ReportExData=_extends({},t.play23440ReportExData,e);
},
setPerf23442ReportExData:function(t,e){
t.perf23442ReportExData=_extends({},t.perf23442ReportExData,e);
},
setLeave23443ReportExData:function(t,e){
t.leave23443ReportExData=_extends({},t.leave23443ReportExData,e);
},
setOp23444ReportExData:function(t,e){
t.op23444ReportExData=_extends({},t.op23444ReportExData,e);
},
setReload23445ReportExData:function(t,e){
t.reload23445ReportExData=_extends({},t.reload23445ReportExData,e);
},
setAd23446ReportExData:function(t,e){
t.ad23446ReportExData=_extends({},t.ad23446ReportExData,e);
}
},
actions:{
reportEnter23439:function(t,a){
var r=t.state;
e.report(23439,_extends({},r.commonReportData,r.enter23439ReportExData,a));
},
reportPlay23440:function(t,a){
var r=t.state;
e.report(23440,_extends({},r.commonReportData,r.play23440ReportExData,a));
},
reportPerf23442:function(t,a){
var r=t.state;
e.report(23442,_extends({},r.commonReportData,r.perf23442ReportExData,a));
},
reportLeave23443:function(t,a){
var r=t.state;
e.report(23443,_extends({},r.commonReportData,r.leave23443ReportExData,a));
},
reportOp23444:function(t,a){
var r=t.state;
e.report(23444,_extends({},r.commonReportData,r.op23444ReportExData,a));
},
reportReload23445:function(t,a){
var r=t.state;
e.report(23445,_extends({},r.commonReportData,r.reload23445ReportExData,a));
},
reportAd23446:function(t,a){
var r=t.state;
e.report(23446,_extends({},r.commonReportData,r.ad23446ReportExData,a));
}
}
};
});// __BUILD__COMPRESS=FALSE
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

;define('pages_new/common_share/video/player/controller.js', ['biz_wap/zepto/zepto.js', 'biz_wap/zepto/event.js', 'biz_wap/zepto/touch.js', 'biz_wap/ui/weui.js', 'biz_common/utils/string/html.js', 'pages_new/3rd/vue.js', 'pages_new/3rd/vuex.js', 'a/a_utils.js', 'pages/utils.js', 'pages_new/common_share/video/player/controller.html.js', 'biz_wap/jsapi/core.js', 'biz_wap/utils/mmversion.js', 'biz_common/utils/url/parse.js', 'biz_wap/utils/ajax.js', 'pages/loadscript.js', 'appmsg/kan_report.js', 'common/comm_report.js', 'pages_new/common_share/video/player/plugins/base.js', 'pages_new/common_share/video/player/plugins/monitor/monitor.js', 'biz_wap/utils/localstorage.js', 'biz_common/dom/event.js', 'pages/report.js', 'pages_new/common_share/video/player/player.js', 'new_video/ctl.js', 'pages/create_txv.js', 'biz_wap/utils/jsmonitor_report.js', 'biz_wap/jsapi/leaveReport.js', 'biz_wap/utils/setMpInfo.js', 'biz_wap/jsapi/log.js', 'appmsg/topbar.js', 'common/utils.js', 'common/safeAreaInsets.js', 'pages_new/modules/utils/event_bus.js', 'pages_new/common_share/video/utils/immersive_data.js', 'pages_new/common_share/video/report.js'], function (require, exports, module, alert) {
  'use strict';

  require('biz_wap/zepto/zepto.js');
  require('biz_wap/zepto/event.js');
  require('biz_wap/zepto/touch.js');
  require('biz_wap/ui/weui.js');
  require('biz_common/utils/string/html.js');

  var Vue = require('pages_new/3rd/vue.js');

  var _require = require('pages_new/3rd/vuex.js');

  var mapState = _require.mapState;
  var mapMutations = _require.mapMutations;
  var mapActions = _require.mapActions;

  var utils = require('a/a_utils.js');
  var pageUtils = require('pages/utils.js');
  var tpl = require('pages_new/common_share/video/player/controller.html.js');
  var JSAPI = require('biz_wap/jsapi/core.js');
  var Mmversion = require('biz_wap/utils/mmversion.js');
  var Url = require('biz_common/utils/url/parse.js');
  var Ajax = require('biz_wap/utils/ajax.js');
  var loadscript = require('pages/loadscript.js');
  var KanReport = require('appmsg/kan_report.js');
  var commReport = require('common/comm_report.js');
  var Plugin = require('pages_new/common_share/video/player/plugins/base.js');
  var VideoMonitor = require('pages_new/common_share/video/player/plugins/monitor/monitor.js');
  var LS = require('biz_wap/utils/localstorage.js');
  var DomEvent = require('biz_common/dom/event.js');
  var Report = require('pages/report.js');
  var Player = require('pages_new/common_share/video/player/player.js');
  var VideoCtl = require('new_video/ctl.js');
  var TxVideoUtils = require('pages/create_txv.js');
  var JsmonitorReport = require('biz_wap/utils/jsmonitor_report.js');
  var leaveReport = require('biz_wap/jsapi/leaveReport.js');
  var setMpInfo = require('biz_wap/utils/setMpInfo.js');
  var Log = require('biz_wap/jsapi/log.js');
  var topBar = require('appmsg/topbar.js');
  var commonUtils = require('common/utils.js');
  var safeAreaInsets = require('common/safeAreaInsets.js');

  var _require2 = require('appmsg/topbar.js');

  var setTopBarWhenVisible = _require2.setTopBarWhenVisible;

  var EventBus = require('pages_new/modules/utils/event_bus.js');
  var jsmonitorReport = require('biz_wap/utils/jsmonitor_report.js');

  var _require3 = require('pages_new/common_share/video/utils/immersive_data.js');

  var getImmersivePlayerData = _require3.getImmersivePlayerData;
  var oprImmersivePlayerData = _require3.oprImmersivePlayerData;

  var _require4 = require('pages_new/common_share/video/report.js');

  var getNetType = _require4.getNetType;
  var getDeviceModel = _require4.getDeviceModel;
  var getOsName = _require4.getOsName;
  var getOsVersion = _require4.getOsVersion;
  var getMiaoKai = _require4.getMiaoKai;

  var g = {
    cachekey: 'qqmovieStatus_',
    cacheTime: 10 * 60 * 1000,
    networkType: '',
    isPc: /(WindowsNT)|(Windows NT)|(Macintosh)/i.test(navigator.userAgent),
    defaultErrorWording: '视频加载失败，请刷新页面重试',
    defaultHeadImgUrl: 'http://mmbiz.qpic.cn/mmbiz/a5icZrUmbV8p5jb6RZ8aYfjfS2AVle8URwBt8QIu6XbGewB9wiaWYWkPwq4R7pfdsFibuLkic16UcxDSNYtB8HnC1Q/0',
    playerStatus: {
      formatId: null
    },
    netTypeMap: {
      'network_type:fail': 'fail',
      'network_type:edge': '2g/3g',
      'network_type:wwan': '2g/3g',
      'network_type:wifi': 'wifi'
    },
    formatIdMap: {
      '20003': 4,
      '10002': 3,
      '10003': 2,
      '10004': 1
    }
  };

  var topStickyInfoContinue = ['继续观看', ''];
  var topStickyInfoRefresh = ['再次观看', 'refresh'];
  var topStickyInfoMap = {
    1: topStickyInfoContinue.concat('135px'),
    2: topStickyInfoRefresh.concat('135px'),
    201: topStickyInfoContinue.concat('100%'),
    202: topStickyInfoRefresh.concat('100%'),
    203: topStickyInfoContinue.concat('135px'),
    204: topStickyInfoRefresh.concat('135px')
  };

  var RECOMMEND_ACTION_CLIENT = 'update_recommend_status';
  var RECOMMEND_ACTION_WEB = 'submitMsgToTL';
  var MAX_RECOMMEND_LENGTH = 200;
  var connectWithApp = function connectWithApp(like, comment) {

    var transferData = {
      origin: 'mp',
      isLike: like ? 1 : 0,
      url: encodeURIComponent(window.msg_link.html(false)),
      content: comment || ''
    };

    JSAPI.invoke('handleHaokanAction', {
      action: RECOMMEND_ACTION_WEB,
      recommend: like ? 1 : 0,
      server_data: JSON.stringify(transferData)
    }, function (res) {
      console.log('handleHaokanAction', res);
    });

    JSAPI.invoke('handleHaokanAction', {
      action: RECOMMEND_ACTION_CLIENT,
      permission: 1,
      recommend: like ? 1 : 0
    }, function (res) {
      console.log('handleHaokanAction for client', res);
    });
  };

  var mpVideoPlayer = Vue.extend({
    template: tpl,
    components: _defineProperty({}, Player.name, Player),
    data: function data() {
      return {
        opt: null,
        playerOpt: null,
        wrapStyle: null,
        videoStyle: null,
        topStickyExpendWhenPaused: false,
        toastTips: ''
      };
    },

    computed: _extends({}, mapState('mp-video-player', ['errType', 'errCode', 'errMsg', 'banOprStatus', 'fullscreenStatus', 'orientationStatus', 'refreshBtnStatus', 'topStickyInfoStatus', 'commonReportData', 'enter23439ReportExData']), {
      innerPlugins: function innerPlugins() {
        return this.opt && this.opt.plugins && this.opt.plugins.filter(function (p) {
          return p.type === Plugin.TYPE_INNER;
        }) || [];
      },
      coverPlugins: function coverPlugins() {
        return this.opt && this.opt.plugins && this.opt.plugins.filter(function (p) {
          return p.type === Plugin.TYPE_COVER;
        }) || [];
      },
      controlPlugins: function controlPlugins() {
        return this.opt && this.opt.plugins && this.opt.plugins.filter(function (p) {
          return p.type === Plugin.TYPE_CONTROL;
        }) || [];
      },
      topStickyInfoWording: function topStickyInfoWording() {
        var info = topStickyInfoMap[this.topStickyInfoStatus];
        return info && info[0] || '继续观看';
      },
      topStickyInfoIconClass: function topStickyInfoIconClass() {
        var info = topStickyInfoMap[this.topStickyInfoStatus];
        return info && info[1] || '';
      },
      topStickyInfoMaskWidth: function topStickyInfoMaskWidth() {
        var info = topStickyInfoMap[this.topStickyInfoStatus];
        return info && info[2] || '100%';
      }
    }),
    watch: {
      banOprStatus: function banOprStatus() {
        this.setVideoMenuItems();
      },
      orientationStatus: function orientationStatus() {
        this.onOrientationStatusChange();
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.initController();

      commReport.leaveReport(23443, function () {
        return _this.onLeaveReport23443({ event: 1, type: 'leaveReport' });
      });
      commReport.leaveReport(23443, function () {
        return _this.onLeaveReport23443({ type: 'leaveReport' });
      });
      leaveReport.addReport(function () {
        return _this.onKykLeaveReport({ type: 'leaveReport' });
      });
      leaveReport.addReport(function () {
        return _this.onPageUnload({ type: 'leaveReport' });
      });
      leaveReport.addSpecificReport('native_data', function () {
        return {
          video_data: {
            vid: _this.opt.vid,
            lastPlayedTime: _this.getCurrentTime(),
            lastPlayedTimeExpiredTime: (Date.now() + g.cacheTime) / 1000
          }
        };
      });

      window.addEventListener('unload', this.__onLeaveReport23443EventType1 = function () {
        return _this.onLeaveReport23443({ event: 1 });
      });
      window.addEventListener('unload', this.__onLeaveReport23443EventType2or3 = function () {
        return _this.onLeaveReport23443();
      });
      window.addEventListener('unload', this.onKykLeaveReport);
      window.addEventListener('unload', this.onPageUnload);
      window.addEventListener('resize', this.onPageResize);
      document.addEventListener('visibilitychange', this.onVisibilityChange);
    },
    beforeDestroy: function beforeDestroy() {
      window.addEventListener('unload', this.__onLeaveReport23443EventType1);
      window.addEventListener('unload', this.__onLeaveReport23443EventType2or3);
      window.removeEventListener('unload', this.onKykLeaveReport);
      window.removeEventListener('unload', this.onPageUnload);
      window.removeEventListener('resize', this.onPageResize);
      document.removeEventListener('visibilitychange', this.onVisibilityChange);

      this.disableTopSticky();
    },

    methods: _extends({}, mapMutations('mp-video-player', ['setError', 'setTopStickyInfoStatus', 'setCommonReportData', 'setEnter23439ReportExData', 'setPlay23440ReportExData', 'setPerf23442ReportExData', 'setLeave23443ReportExData', 'setOp23444ReportExData', 'setReload23445ReportExData', 'setAd23446ReportExData']), mapActions('mp-video-player', ['reportEnter23439', 'reportPlay23440', 'reportPerf23442', 'reportLeave23443', 'reportOp23444', 'reportReload23445', 'reportAd23446']), {
      initController: function initController() {
        var _this2 = this;

        this.opt = _extends({
          bizUserName: '',
          bizNickName: '',
          profileTabType: 2,
          videoTitle: '',
          headImgUrl: '',
          preview: false,
          fromid: 0,
          oriStatus: 3,
          isMpVideo: 0,
          supportNativeFullPlayer: true,
          canShareVideo: true,
          videoMd5: '',
          oriVid: '',
          vid: '',
          ckey: '',
          width: 0,
          height: 0,
          autoplay: false,
          loop: false,
          __biz: '',
          uin: '',
          mid: '',
          idx: '',
          comment_id: '',
          scene_type: 0,
          hitBizuin: '',
          hitVid: '',
          totalRange: 10,
          useWcSlPlayer: false,
          useImmersiveMode: false,
          useFeFullscreen: false,
          coverFit: 'contain',
          auto: {
            loadRetryTime: 0,
            isShowTip: false,
            isChangeAuto: false,
            isShowSuc: false
          }
        }, this.$options.opt);
        this.opt.oriVid = this.opt.oriVid || this.opt.vid;
        this.opt.headImgUrl = this.opt.headImgUrl || g.defaultHeadImgUrl;
        if (this.opt.oriStatus != 1 && this.opt.oriStatus != 2) {
          this.opt.oriStatus = 3;
        }
        if (!Mmversion.isWechat || !Mmversion.isIOS && !Mmversion.isAndroid || Mmversion.isIOS && Mmversion.ltVersion('7.0.9') || Mmversion.isAndroid && Mmversion.ltVersion('7.0.10') || Mmversion.isInMiniProgram || !this.opt.videoMd5) {
          this.opt.supportNativeFullPlayer = false;
          if (!commonUtils.supportImmersiveMode) {
            this.opt.canShareVideo = false;
          }
        }

        this.__reportData = Report.getVideoReportData();
        this.__gWidth = this.__gWidth || this.opt.width;
        this.__gHeight = this.__gHeight || this.opt.height;
        this.__hasFirstPlayed = false;
        this.__hasReport23439Enter = false;
        this.__hasLeaveReport23443EventType1 = false;
        this.__hasLeaveReport23443EventType2or3 = false;
        this.__enterTime = new Date().getTime();
        this.__enterPageTime = this.opt.useImmersiveMode ? 0 : this.__enterTime;
        this.__enterImmersiveModeTime = 0;
        this.__playRangeInfo = [];
        this.__dynamicErrMsg = '';
        this.__isUnloaded = false;
        this.__isShowTx = false;
        this.__dataCount = 0;
        this.__targetDataCount = 2;
        this.__coverUrl = '';
        this.__cacheStartTs = 0;
        this.__initialData = null;
        this.__vInfo = {
          status: null,
          coverUrl: '',
          dynamicData: null
        };

        this.hideError();
        this.initLegacyPlugins();
        this.initReportData();
        this.initKykReportData();

        utils.report115849(71);

        if (this.replaceByTxVideo() === true) {
          utils.report115849(70);
          return;
        }

        this.getCache();
        if (window.__timelineInitialData) {
          this.__initialData = window.__timelineInitialData;
          delete window.__timelineInitialData;
        }
        this.getCoverUrl();

        if (g.playerStatus && !g.playerStatus.formatId) {
          getNetworkBeforeCallback(function () {
            return _this2.getDynamicData();
          });
        } else {
          this.getDynamicData();
        }

        getImmersivePlayerData({
          biz: this.opt.__biz,
          mid: this.opt.mid,
          idx: this.opt.idx,
          vid: this.opt.vid,
          onSuccess: function onSuccess(ret) {
            if (_this2.playerOpt) {
              _this2.playerOpt.readNum = ret.view_num.pv;
              _this2.playerOpt.praiseNum = ret.like_num.pv;
              _this2.playerOpt.likeNum = ret.seen_num.pv;
              _this2.playerOpt.isPraised = ret.like_num.liked;
              _this2.playerOpt.isLiked = ret.seen_num.seen;
            } else {
              _this2.__immersiveData = ret;
            }
            if (!_this2.opt.preview && _this2.opt.useImmersiveMode) {
              JSAPI.invoke('handleHaokanAction', {
                action: RECOMMEND_ACTION_CLIENT,
                permission: commonUtils.supportImmersiveMode ? 1 : 0,
                recommend: ret.seen_num.seen ? 1 : 0
              });
            }
          }
        });

        this.reportH265VideoSupport();

        if (typeof this.opt.leaveReport12710Type === 'number') {
          this.leaveReport12710();
        }
      },
      reload: function reload() {

        this.playerOpt = null;

        this.initController();
      },
      destroyPlugins: function destroyPlugins() {

        this.opt.plugins = [];
        this.__legacyPlugins.forEach(function (p) {
          return p.destroy && p.destroy();
        });
        this.__legacyPlugins = [];
        this.__blockPlugin = {};
      },
      resetPlayer: function resetPlayer() {
        var player = this.$refs.player;
        if (player) {
          player.__canplay = false;
          player.pause();
          player.showLoading();
          player.preventOperating(2);
          player.$refs.video.currentTime = 0;
          player.currentTime = 0;
        }
      },
      reinit: function reinit(opt) {
        var _this3 = this;

        if (this.opt && _typeof(this.opt) === 'object') {
          this.$options.opt = opt;
        }

        delete this.__gWidth;
        delete this.__gHeight;

        this.$nextTick(function () {
          _this3.initController();

          commReport.leaveReport(23443, function () {
            return _this3.onLeaveReport23443({ event: 1, type: 'leaveReport' });
          });
          commReport.leaveReport(23443, function () {
            return _this3.onLeaveReport23443({ type: 'leaveReport' });
          });
          leaveReport.addReport(function () {
            return _this3.onKykLeaveReport({ type: 'leaveReport' });
          });
          leaveReport.addReport(function () {
            return _this3.onPageUnload({ type: 'leaveReport' });
          });
          leaveReport.addSpecificReport('native_data', function () {
            return {
              video_data: {
                vid: _this3.opt.vid,
                lastPlayedTime: _this3.getCurrentTime(),
                lastPlayedTimeExpiredTime: (Date.now() + g.cacheTime) / 1000
              }
            };
          });
        });
      },
      initReportData: function initReportData() {
        var rp = this.__reportData;
        rp.mid = this.opt.mid;
        rp.__biz = this.opt.__biz;
        rp.idx = this.opt.idx;
        rp.vid = this.opt.vid;
        rp.commentid = this.opt.comment_id;
        rp.scene_type = this.opt.scene_type;
        rp.auto_play = this.opt.autoplay ? 1 : 0;
        rp.fromid = this.opt.fromid;
        rp.hit_bizuin = this.opt.hitBizuin;
        rp.hit_vid = this.opt.hitVid;
        this.__monitorUid = this.triggerEvent('initMonitor', 64728);
        this.__monitorUid2 = this.triggerEvent('initMonitor', 110644);
      },
      initKykReportData: function initKykReportData() {
        this.__videoReportInfo = {
          hasUnloadReport: false,
          hasApiReport: false,
          every_start_play_time: 0,
          every_end_play_time: 0,
          total_play_time: 0
        };
        this.__kanReportData = {
          rec_expand: pageUtils.getParam('rec_expand') || '',
          scene: pageUtils.getParam('scene') || '',
          report_action: 1,
          vid: this.opt.vid,
          start_play_time: 0,
          end_play_time: 0,
          play_time: 0,
          has_end: 0,
          replay_cnt: 0,
          pause_cnt: 0,
          auto_play: this.opt.autoplay ? 1 : 0,
          has_full_screen: this.fullscreenStatus ? 1 : 0
        };
      },
      initImmersiveReportCommonData: function initImmersiveReportCommonData() {
        var bizuin = 0;
        try {
          bizuin = window.atob(this.opt.__biz) * 1;
        } catch (e) {}
        var dynamicData = this.__vInfo.dynamicData && this.__vInfo.dynamicData.data || {};
        var playCommonData = {
          DeviceModel: getDeviceModel(),
          DeviceBrand: getDeviceModel(),
          OsName: getOsName(),
          OsVersion: getOsVersion(),
          NetType: getNetType(),
          MiaoKai: getMiaoKai(),
          ScreenWidth: window.screen.width,
          ScreenHeight: window.screen.height
        };
        var device = -1;
        if (Mmversion.isIOS) {
          device = 1;
        } else if (Mmversion.isAndroid) {
          device = 2;
        }
        this.setCommonReportData({
          Vid: this.opt.vid,
          BizUin: bizuin,
          MsgId: this.opt.mid * 1,
          ItemIdx: this.opt.idx * 1,
          PlayerType: commonUtils.isWcSlPage() ? 1 : !this.__isShowTx ? 2 : 3,
          Scene: (window.scene || window.cgiData.scene || pageUtils.getParam('scene')) * 1,
          SubScene: (window.subscene || window.cgiData.subscene || pageUtils.getParam('subscene')) * 1,
          ItemShowType: this.opt.useImmersiveMode ? 16 : window.real_item_show_type * 1,
          EnterId: window.enterid * 1 || window.cgiData.enterid * 1 || parseInt(Date.now() / 1000, 10),
          SessionId: (window.sessionid || '') + '',
          ChannelId: (pageUtils.getParam('channel_session_id') || '') + '',
          ReloadId: (window.reloadid || '') + '',
          ReloadSeq: (window.reloadseq || 1) * 1,
          Duration: parseInt((dynamicData.time || 0) * 1000),
          OrStatus: this.opt.oriStatus * 1,
          PageUrl: window.location.href,
          VideoUrl: dynamicData.totalUrl || '',
          IsFans: window.isFans ? 2 : 1,
          Device: device
        });
        this.setPlay23440ReportExData(_extends({}, playCommonData));
        this.setPerf23442ReportExData(_extends({}, playCommonData));
        this.setOp23444ReportExData({
          FullscreenType: 1
        });
        this.setReload23445ReportExData({
          FullscreenType: 1
        });
      },
      reportH265VideoSupport: function reportH265VideoSupport() {
        var monitorUid2 = this.__monitorUid2;
        this.triggerEvent('setMonitor', monitorUid2, { 36: 1 });
        var video = document.createElement('video');
        if (typeof video.canPlayType === 'function') {
          var playable = video.canPlayType('video/mp4; codecs="hevc"');
          if (playable.toLowerCase() == 'maybe' || playable.toLowerCase() == 'probably') {
            this.triggerEvent('setMonitor', monitorUid2, { 37: 1 });
          }
        }
        this.triggerEvent('sendMonitor', monitorUid2);
      },
      getReportTypeBySceneType: function getReportTypeBySceneType() {

        if (this.opt.scene_type == 0) {
          return 1;
        } else if (this.opt.scene_type == 1 || this.opt.scene_type == 2) {
          return 2;
        } else if (this.opt.scene_type == 4) {
          return 3;
        } else if (this.opt.scene_type == 7) {
          return 4;
        }
        return 0;
      },
      onPageUnload: function onPageUnload(opt) {
        if (this.__isUnloaded) {
          return;
        }
        this.__isUnloaded = true;
        var __reportData = this.__reportData;

        if (__reportData.videoerror === 0) {
          this.cacheData();
        } else {
          this.clearCache();
        }

        this.getPlayerReportData();

        if (opt && opt.type === 'leaveReport') {

          var reportData = [];
          for (var key in __reportData) {
            if (__reportData.hasOwnProperty(key)) {
              reportData.push(key + '=' + encodeURIComponent(__reportData[key]));
            }
          }
          return {
            reportUrl: '/mp/videoreport?',
            method: 'POST',
            reportData: reportData.join('&')
          };
        } else {
          Report.videoreport({
            data: __reportData,
            async: false
          });
        }
      },
      onLeaveReport23443: function onLeaveReport23443() {
        var opt = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        if (opt.event === 1 && this.__hasLeaveReport23443EventType1 || opt.event !== 1 && this.__hasLeaveReport23443EventType2or3) {
          return;
        }

        var eventTime = this.getCurrentTimeMs();
        var playTime = this.getRealPlayTime();
        var stayTime = new Date().getTime() - this.__enterTime;

        var data = undefined;

        if (opt.event === 1) {
          this.__hasLeaveReport23443EventType1 = true;
          data = {
            EventType: 1,
            EventTime: eventTime,
            PlayTime: playTime,
            StayTime: stayTime
          };
        } else {
          this.__hasLeaveReport23443EventType2or3 = true;
          if (this.fullscreenStatus) {
            data = {
              EventType: 3,
              EventTime: eventTime,
              PagePlayTime: playTime,
              PageStayTime: stayTime
            };
          } else {
            data = {
              EventType: 2,
              EventTime: eventTime,
              ImmersivePlayTime: playTime,
              ImmersiveStayTime: stayTime
            };
          }
        }

        if (data) {
          if (opt.type === 'leaveReport') {
            return _extends({}, this.commonReportData, data);
          } else {
            this.reportLeave23443(data);
          }
        }
      },
      onKykLeaveReport: function onKykLeaveReport(opt) {
        if (opt && opt.type === 'leaveReport' && !this.__videoReportInfo.hasUnloadReport || !this.__videoReportInfo.hasApiReport) {
          this.__videoReportInfo.every_end_play_time = Math.round(this.getCurrentTime() * 1000);
          if (!this.__pauseTimestamp) {

            this.__videoReportInfo.total_play_time += this.__videoReportInfo.every_end_play_time - this.__videoReportInfo.every_start_play_time;
          }
          this.__kanReportData.play_time = this.__videoReportInfo.total_play_time;
          this.__kanReportData.end_play_time = Date.parse(new Date()) / 1000;

          if (opt && opt.type === 'leaveReport') {
            if (pageUtils.getParam('rec_expand') && pageUtils.getParam('scene') * 1 === 94) {
              this.__videoReportInfo.hasApiReport = true;

              console.log('kanReportData' + JSON.stringify(this.__kanReportData));
              var reportData = [];
              for (var key in this.__kanReportData) {
                if (this.__kanReportData.hasOwnProperty(key)) {
                  reportData.push(key + '=' + encodeURIComponent(this.__kanReportData[key]));
                }
              }
              return {
                reportUrl: 'https://mp.weixin.qq.com/mp/videoreport?action=report_for_kyk',
                reportData: reportData.join('&'),
                method: 'POST'
              };
            }
          } else {
            this.__videoReportInfo.hasUnloadReport = true;

            console.log('real play time' + this.__videoReportInfo.total_play_time);
            KanReport.reportKanData(this.__kanReportData);
          }
        }
      },
      onVisibilityChange: function onVisibilityChange() {
        if (document.hidden) {

          this.cacheData();
        }
      },
      onPageResize: function onPageResize() {
        var _this4 = this;

        if (this.__preventResize) {
          return;
        }
        if (this.$refs.player && this.$refs.player.isWcSlPlayer) {
          if (!this.fullscreenStatus) {
            setTimeout(function () {

              var dom = $(_this4.$el).parent();
              var w = dom.offset().width;
              if (w != 0) {
                _this4.setVideoSize({
                  width: w
                });
              }
            }, 0);
          }
          return;
        }
        if (!this.opt.height || !this.opt.width) {
          return;
        }
        if (this.__isShowTx && this.__txPlayer) {
          setTimeout(function () {
            try {
              var dom = $(_this4.$el).parent();
              var ratio = _this4.opt.width / _this4.opt.height;
              var w = dom.offset().width;
              var h = Math.floor(w / ratio);
              if (w != 0) {
                _this4.__gWidth = w;
                _this4.__gHeight = h;
                dom.css({
                  height: h + 'px'
                });
                _this4.__txPlayer.resize({
                  width: w,
                  height: h
                });
              }
            } catch (e) {}
          }, 0);
        } else {
          setTimeout(function () {
            var dom = $(_this4.$el).parent();
            var ratio = _this4.opt.width / _this4.opt.height;
            var w = dom.offset().width;
            var h = Math.floor(w / ratio);
            if (w != 0) {
              _this4.__gWidth = w;
              _this4.__gHeight = h;
              _this4.setVideoSize({
                width: w,
                height: h
              });
              dom.css({
                height: h + 'px'
              });
            }
          }, 0);
        }
      },
      getCache: function getCache() {
        var data = getVideoInfoCache(this.opt.__biz, this.opt.mid, this.opt.idx, this.opt.vid);
        if (!!data) {
          var vInfo = this.__vInfo;
          vInfo.dynamicData = data.videoInfo.dynamicData || null;
          vInfo.coverUrl = data.videoInfo.coverUrl || '';
          vInfo.status = data.videoInfo.status || null;
          this.__cacheStartTs = data.time || null;
        }
      },
      cacheData: function cacheData() {
        var player = this.$refs.player;
        var vInfo = this.__vInfo;

        if (!player) {
          return;
        }
        if (!vInfo.status) {
          vInfo.status = {};
        }

        if (typeof player.isEnd === 'function') {
          vInfo.status.isEnd = player.isEnd();
        }
        if (typeof player.getCurTime === 'function') {
          vInfo.status.playTime = player.getCurTime();
        }
        if (typeof player.getPlaybackRate === 'function') {
          vInfo.status.playbackRate = player.getPlaybackRate();
        }
        if (!this.__initialData && this.__coverUrl) {
          vInfo.coverUrl = this.__coverUrl;
        }

        cacheVideoInfo(this.opt.__biz, this.opt.mid, this.opt.idx, this.opt.vid, this.__vInfo, this.__cacheStartTs);
      },
      clearCache: function clearCache() {
        clearVideoCache(this.opt.vid);
      },
      leaveReport12710: function leaveReport12710() {
        var _this5 = this;

        var report12710Data = {
          type: this.opt.leaveReport12710Type,
          step: 17,
          useruin: this.opt.uin,
          bizuin: this.opt.__biz,
          mid: this.opt.mid,
          idx: this.opt.idx,
          vid: this.opt.vid
        };
        leaveReport.addReport(function () {
          var realPlayTime = _this5.getRealPlayTime();
          if (!realPlayTime) return false;
          var videoData = _this5.getVideoData();
          report12710Data.duration = Math.round(videoData.time * 1000);
          report12710Data.clienttime = Date.now();
          report12710Data.real_play_time = realPlayTime;
          return {
            reportUrl: 'https://mp.weixin.qq.com/mp/ad_video_report?action=video_play_exit_report',
            reportData: Object.keys(report12710Data).map(function (k) {
              return k + '=' + encodeURIComponent(report12710Data[k] || '');
            }).join('&'),
            method: 'POST'
          };
        });
      },
      initLegacyPlugins: function initLegacyPlugins() {
        var plugins = this.opt.plugins || [];
        this.__blockPlugin = {};
        this.__legacyPlugins = [];

        var monitorPlugin = new VideoMonitor();
        monitorPlugin.setPlayer(this);
        monitorPlugin.init && monitorPlugin.init();

        this.__legacyPlugins.push(monitorPlugin);

        for (var i = 0, len = plugins.length; i < len; i++) {
          var plugin = plugins[i];
          if (plugin.prototype instanceof Plugin) {

            continue;
          }

          plugin.setPlayer(this);
          plugin.init && plugin.init();
          this.__legacyPlugins.push(plugin);
        }
      },
      initPlugins: function initPlugins() {
        var _this6 = this;

        if (this.$refs.innerPlugins) {
          this.$refs.innerPlugins.forEach(function (p) {
            return p.initContext(_this6);
          });
        }
        if (this.$refs.coverPlugins) {
          this.$refs.coverPlugins.forEach(function (p) {
            return p.initContext(_this6);
          });
        }
        if (this.$refs.controlPlugins) {
          this.$refs.controlPlugins.forEach(function (p) {
            return p.initContext(_this6);
          });
        }
      },
      getCoverUrl: function getCoverUrl() {
        var _this7 = this;

        var cacheCover = '';

        if (!!this.__initialData && this.__initialData.initialCover) {
          cacheCover = this.__initialData.initialCover;
        } else if (this.opt.isMpVideo && window.__mpVideoCoverUrl) {
          cacheCover = window.__mpVideoCoverUrl;
          delete window.__mpVideoCoverUrl;
        } else if (!!this.__vInfo.coverUrl) {
          cacheCover = this.__vInfo.coverUrl;
        }

        if (cacheCover) {
          this.__coverUrl = cacheCover;
          this.__dataCount++;
          this.videoDataReady();
          this.getFloatCoverBase64(this.__coverUrl);
          return;
        }

        this.__coverUrl = getCoverByVid(this.opt.vid, this.opt.isMpVideo);
        if (!this.opt.isMpVideo) {
          this.__dataCount++;
          this.videoDataReady();
          this.getFloatCoverBase64(this.__coverUrl);
          return;
        }

        var retry = 1;
        var doSend = function doSend() {
          Ajax({
            'type': 'GET',
            'dataType': 'json',
            timeout: 30000,
            url: _this7.__coverUrl + '&f=json',
            success: function success(resp) {
              if (resp && resp.base_resp && resp.base_resp.ret == 0 && resp.url) {
                _this7.__coverUrl = resp.url;
              }
              _this7.__dataCount++;
              _this7.videoDataReady();
              _this7.getFloatCoverBase64(_this7.__coverUrl);
            },
            error: function error() {
              if (retry > 0) {
                retry--;
                doSend();
                return;
              }
              _this7.__dataCount++;
              _this7.videoDataReady();
            }
          });
        };
        doSend();
      },
      getDynamicData: function getDynamicData() {
        var _this8 = this;

        if (this.opt.isMpVideo && window.__mpVideoTransInfo && window.__mpVideoTransInfo.length > 0) {
          this.__dataCount++;

          this.__vInfo.dynamicData = {
            data: formatMpVideoInfo({
              url_info: window.__mpVideoTransInfo.map(function (i) {
                i.url = i.url.htmlDecode();
                return i;
              })
            })
          };
          delete window.__mpVideoTransInfo;
          this.videoDataReady();

          return;
        }

        if (!!this.__vInfo.dynamicData) {
          this.__dataCount++;
          var d = this.__vInfo.dynamicData;
          this.__reportData.getvinfo_ret = typeof d.ret_code !== 'undefined' ? d.ret_code : -2;
          this.__reportData.getvinfo_time = d.c_time || 0;
          if (this.opt.isMpVideo && d.data && d.data.ori_url_info && d.data.ori_url_info.length > 0) {

            this.__vInfo.dynamicData = {
              data: formatMpVideoInfo({
                url_info: d.data.ori_url_info
              })
            };
          }
          this.videoDataReady();

          return;
        }

        var monitorUid = this.__monitorUid;
        var monitorUid2 = this.__monitorUid2;

        if (this.opt.isMpVideo) {
          getMpVideoInfo({
            preview: this.opt.preview,
            vid: this.opt.vid,
            __biz: this.opt.__biz,
            mid: this.opt.mid,
            idx: this.opt.idx,
            auto: !!(Mmversion.isAndroid && Mmversion.gtVersion('7.0.16', 1)),
            onSuccess: function onSuccess(d) {
              _this8.triggerEvent('setMonitor', monitorUid2, {
                4: 1,
                5: 1
              });
              _this8.triggerEvent('sendMonitor', monitorUid2);
              _this8.__dataCount++;
              _this8.__vInfo.dynamicData = d;
              _this8.videoDataReady();
            },
            onError: function onError(d) {
              var code = d.code;
              _this8.triggerEvent('setMonitor', monitorUid2, {
                4: 1,
                6: 1
              });
              switch (code) {
                case 80:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 7: 1, 24: 1 });break;
                case 81:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 7: 1, 25: 1 });break;
                case 82:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 7: 1, 26: 1 });break;
                case 83:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 7: 1, 27: 1 });break;
                case 84:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 7: 1, 28: 1 });break;
                case 85:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 7: 1, 29: 1 });break;
                case 71:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 8: 1 });break;
                case 72:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 9: 1 });break;
                case 73:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 10: 1 });break;
                case 74:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 11: 1 });break;
                case 75:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 34: 1 });break;
                case 76:
                  _this8.triggerEvent('setMonitor', monitorUid2, { 35: 1 });break;
                default:
                  break;
              }
              _this8.triggerEvent('sendMonitor', monitorUid2);
              _this8.__reportData.videoerror = code;
              _this8.__dynamicErrMsg = d.err_msg || '';
              _this8.__reportData.duration_ms = 0;
              _this8.__vInfo.dynamicData = null;
              _this8.__dataCount = _this8.__targetDataCount;
              _this8.videoDataReady();

              _this8.reportPerf23442({
                EventType: 4,
                EventTime: _this8.getCurrentTimeMs(),
                Definition: _this8.getCurrentDefinition(),
                VideoWidth: _this8.playerOpt && _this8.playerOpt.videoWidth || 0,
                VideoHeight: _this8.playerOpt && _this8.playerOpt.videoHeight || 0,
                playErrType: code
              });
            }
          });
          return;
        }

        getQQVideoUrlInfo({
          vid: this.opt.vid,
          ckey: this.opt.ckey,
          onSuc: function onSuc(d) {

            _this8.triggerEvent('setMonitor', monitorUid, {
              10: 1,
              11: 1,
              13: Math.min(d.c_time, 60000)
            });

            if (d.data.width && d.data.height) {
              var scale = Math.round(d.data.width * 10 / d.data.height * 1);

              if (scale > 20) {
                scale = 20;
              } else if (scale < 0) {
                scale = 0;
              }
              var scaleKey = 41 + scale * 2;
              var scaleData = {};
              scaleData[scaleKey] = 1;
              _this8.triggerEvent('setMonitor', monitorUid, scaleData);
            } else {
              _this8.triggerEvent('setMonitor', monitorUid, { 83: 1 });
            }
            _this8.triggerEvent('sendMonitor', monitorUid);

            _this8.__dataCount++;
            _this8.__vInfo.dynamicData = d;
            _this8.__reportData.getvinfo_ret = d.ret_code;
            _this8.__reportData.getvinfo_time = d.c_time;
            _this8.__reportData.file_size = d.data.file_size;
            _this8.__reportData.rate = d.data.rate;
            _this8.__reportData.resolution = d.data.resolution;
            _this8.__reportData.format = d.data.format;
            _this8.__reportData.vt = d.data.vt;
            _this8.__reportData.video_ext = Report.getsdtfrom();
            _this8.videoDataReady();
          },
          onError: function onError(errorCode, d) {

            _this8.triggerEvent('setMonitor', monitorUid, {
              10: 1,
              12: 1,
              13: Math.min(d.c_time, 60000)
            });

            if (errorCode == -2) {
              switch (d.ret_code * 1) {
                case -2:
                  _this8.triggerEvent('setMonitor', monitorUid, { 17: 1 });_this8.__reportData.videoerror = 2;break;
                case -3:
                  _this8.triggerEvent('setMonitor', monitorUid, { 40: 1 });_this8.__reportData.videoerror = 53;break;
                case -4:
                  _this8.triggerEvent('setMonitor', monitorUid, { 109: 1 });_this8.__reportData.videoerror = 54;break;
                case -5:
                  _this8.triggerEvent('setMonitor', monitorUid, { 110: 1 });_this8.__reportData.videoerror = 55;break;
                case 61:
                  _this8.triggerEvent('setMonitor', monitorUid, { 18: 1 });_this8.__reportData.videoerror = 25;break;
                case 62:
                  _this8.triggerEvent('setMonitor', monitorUid, { 19: 1 });_this8.__reportData.videoerror = 26;break;
                case 64:
                  _this8.triggerEvent('setMonitor', monitorUid, { 20: 1 });_this8.__reportData.videoerror = 27;break;
                case 67:
                  _this8.triggerEvent('setMonitor', monitorUid, { 21: 1 });_this8.__reportData.videoerror = 28;break;
                case 69:
                  _this8.triggerEvent('setMonitor', monitorUid, { 22: 1 });_this8.__reportData.videoerror = 52;break;
                case 80:
                  _this8.triggerEvent('setMonitor', monitorUid, { 23: 1 });_this8.__reportData.videoerror = 29;break;
                case 81:
                  _this8.triggerEvent('setMonitor', monitorUid, { 24: 1 });_this8.__reportData.videoerror = 50;break;
                case 85:
                  _this8.triggerEvent('setMonitor', monitorUid, { 25: 1 });_this8.__reportData.videoerror = 51;break;
                default:
                  _this8.triggerEvent('setMonitor', monitorUid, { 26: 1 });_this8.__reportData.videoerror = 24;break;
              }
            } else {
              switch (errorCode * 1) {
                case -22:
                  _this8.triggerEvent('setMonitor', monitorUid, { 15: 1 });break;
                case -21:
                  _this8.triggerEvent('setMonitor', monitorUid, { 14: 1 });break;
                case -23:
                  _this8.triggerEvent('setMonitor', monitorUid, { 16: 1 });break;
                default:
                  break;
              }
              _this8.__reportData.videoerror = errorCode * -1;
            }
            _this8.triggerEvent('sendMonitor', monitorUid);
            _this8.__dynamicErrMsg = d.err_msg || '';
            _this8.__reportData.getvinfo_ret = d.ret_code;
            _this8.__reportData.duration_ms = 0;
            _this8.__reportData.getvinfo_time = d.c_time || 0;
            _this8.__vInfo.dynamicData = null;
            _this8.__dataCount = _this8.__targetDataCount;
            _this8.videoDataReady();

            _this8.reportPerf23442({
              EventType: 4,
              EventTime: _this8.getCurrentTimeMs(),
              Definition: _this8.getCurrentDefinition(),
              VideoWidth: _this8.playerOpt && _this8.playerOpt.videoWidth || 0,
              VideoHeight: _this8.playerOpt && _this8.playerOpt.videoHeight || 0,
              playErrType: errorCode * -1
            });
          }
        });
      },
      videoDataReady: function videoDataReady() {
        var _this9 = this;

        if (this.__dataCount !== this.__targetDataCount) {
          return;
        }
        if (this.__isShowTx) {
          this.removeLoading();
        } else if (this.__vInfo.dynamicData) {
          this.createPlayer();
        } else {
          this.removeLoading();
          Log.error('player controller: failed to create player because no dynamic data');
        }
        callWhenExtDone(function () {
          _this9.initImmersiveReportCommonData();
          if (!_this9.__hasReport23439Enter) {
            _this9.__hasReport23439Enter = true;
            if (_this9.enter23439ReportExData.UserDanMuFlag) {
              _this9.reportEnter23439();
            }
            if (!_this9.opt.useImmersiveMode && commonUtils.supportImmersiveMode) {

              _this9.reportPv23447();
            }
          }
        });
      },
      createPlayer: function createPlayer() {
        var _this10 = this;

        var vInfo = this.__vInfo;
        var report = this.__reportData;
        var dynamicData = vInfo.dynamicData.data;

        this.__reportData.duration_ms = parseInt(dynamicData.time * 1000);
        this.initPlayRangeInfo({
          durationMs: this.__reportData.duration_ms
        });
        report.vtitle = this.opt.vtitle || dynamicData.title || '';

        var videoReportType = this.getReportTypeBySceneType();
        var resolutionInfo = undefined;
        if (dynamicData.ori_url_info) {
          (function () {
            var resolutionNameMap = {
              '10002': '超清',
              '10003': '高清',
              '10004': '流畅',
              '20003': '自动'
            };
            resolutionInfo = [];
            dynamicData.ori_url_info.forEach(function (info) {
              if (info.format_id * 1 === 20003 && (!Mmversion.isWechat || !Mmversion.isAndroid || !Mmversion.gtVersion('7.0.16', 1))) {

                return;
              }
              resolutionInfo.push({
                name: info.video_quality_wording || resolutionNameMap[info.format_id],
                formatId: info.format_id,
                height: info.height,
                width: info.width,
                src: info.url
              });
            });
          })();
        }
        var playbackRateInfo = [{ rate: 0.5, name: '0.5倍' }, { rate: 0.75, name: '0.75倍' }, { rate: 1.0, name: '1.0倍' }, { rate: 1.5, name: '1.5倍' }, { rate: 2.0, name: '2.0倍' }];

        var playTimeParam = Url.getQuery('play_time');

        var initialTime = 0;
        if (this.__initialData) {
          initialTime = this.__initialData.initialTime || 0;
        } else if (playTimeParam !== '') {
          initialTime = playTimeParam * 1 || 0;
        } else if (vInfo.status && !vInfo.status.isEnd) {
          initialTime = vInfo.status.playTime || 0;
        }

        Log.info('player controller: begin to create player');

        this.playerOpt = {
          __biz: this.opt.__biz,
          mid: this.opt.mid,
          idx: this.opt.idx,
          bizUserName: this.opt.bizUserName,
          bizNickName: this.opt.bizNickName,
          profileTabType: this.opt.profileTabType,
          videoTitle: report.vtitle,
          videoReportType: videoReportType,

          coverFit: this.opt.coverFit,
          cover: this.__coverUrl,
          width: this.__gWidth,
          height: this.__gHeight,
          videoWidth: dynamicData.width,
          videoHeight: dynamicData.height,
          duration: dynamicData.time,
          autoplay: this.opt.autoplay,
          flowNotice: this.opt.flowNotice,
          flow: dynamicData.flow,
          loop: this.opt.loop,
          src: dynamicData.totalUrl,
          formatId: dynamicData.formatid,
          headImgUrl: this.opt.headImgUrl,
          useWcSlPlayer: this.opt.useWcSlPlayer,
          useImmersiveMode: this.opt.useImmersiveMode,
          useFeFullscreen: this.opt.useFeFullscreen,
          oriStatus: this.opt.oriStatus,
          initialTime: initialTime,
          resolutionInfo: resolutionInfo,
          playbackRateInfo: playbackRateInfo,
          playbackRateBtnInfoDefaultId: 2,
          supportNativeFullPlayer: this.opt.supportNativeFullPlayer,
          canShareVideo: this.opt.canShareVideo,
          videoMd5: this.opt.videoMd5,
          extinfo: {
            hit_bizuin: this.opt.hitBizuin,
            hit_vid: this.opt.hitVid,
            vid: this.opt.vid,
            preview: this.opt.preview,
            pageplayer: this
          },
          fileSize: dynamicData.file_size,
          checkPlayAuthority: this.checkPlayAuthority,
          readNum: this.__immersiveData && this.__immersiveData.view_num.pv || 0,
          praiseNum: this.__immersiveData && this.__immersiveData.like_num.pv || 0,
          likeNum: this.__immersiveData && this.__immersiveData.seen_num.pv || 0,
          isPraised: this.__immersiveData && this.__immersiveData.like_num.liked || 0,
          isLiked: this.__immersiveData && this.__immersiveData.seen_num.seen || 0
        };

        this.qqVideoReport({ step: 3 });
        this.$nextTick(function () {
          _this10.initPlugins();
          _this10.triggerEvent('playerReady');
        });
      },
      removeLoading: function removeLoading() {

        this.afterRemoveLoading();
      },
      afterRemoveLoading: function afterRemoveLoading() {
        if (!this.__isShowTx && !this.__vInfo.dynamicData) {
          if (this.opt.isMpVideo) {
            var errType = 1;

            if (this.__reportData.videoerror == 72 || this.__reportData.videoerror == 73) {
              errType = 2;
            }
            this.showError(this.__dynamicErrMsg, errType);
          } else {
            this.showError(this.__dynamicErrMsg || '');
          }
        }
        var videoData = this.getVideoData();
        this.triggerEvent('videoReady', { formatId: videoData && videoData.formatid });
      },
      showError: function showError(msg, errType) {

        msg = msg || g.defaultErrorWording;
        this.setError({
          type: errType || 1,
          code: this.__reportData.videoerror,
          msg: msg,
          refresh: msg === g.defaultErrorWording ? 1 : 0
        });

        this.disableTopSticky();
      },
      hideError: function hideError() {

        this.setError({ type: 0, code: 0, msg: '', refresh: 0 });
      },
      checkPlayAuthority: function checkPlayAuthority(params) {
        var _this11 = this;

        if (this.opt.checkNoPaid) {

          Ajax({
            'type': 'GET',
            'dataType': 'json',
            timeout: 30000,
            url: '/mp/videoplayer?action=check_video_paid_status&__biz=' + this.opt.__biz + '&mid=' + this.opt.mid + '&idx=' + this.opt.idx,
            success: function success(d) {
              if (!d.can_play == 1) {
                window.weui.confirm('此视频来自于付费内容，在原文付费后才可播放', {
                  buttons: [{
                    type: 'default',
                    label: '取消'
                  }, {
                    label: '前往原文',
                    onClick: function onClick() {
                      _this11.opt.openArticle();
                    }
                  }]
                });
              } else if (typeof params.allowPlay === 'function') {
                params.allowPlay();
              }
            }
          });
        } else if (typeof params.allowPlay === 'function') {
          params.allowPlay();
        }
      },
      onLoaded: function onLoaded() {
        var _this12 = this;

        setTimeout(function () {
          _this12.removeLoading();
        }, 0);
        Log.info('player controller: succ created player');
      },
      onTimeupdate: function onTimeupdate(resp) {
        if (!this.__reportedTimeupdate) {
          this.__reportedTimeupdate = true;
          VideoCtl.report({
            step: 6,
            vid: this.opt.vid,
            traceid: this.getTraceId(),
            orderid: this.getOrderid(),
            type: this.getReportTypeBySceneType(),
            fromid: this.opt.fromid
          });

          var log = this.$refs.player.getLog();
          var loadwait = log.loadwait || 0;
          this.qqVideoReport({
            step: 6,
            loadwait: loadwait
          });
        }
        if (!this.__reportedPv) {
          this.__reportedPv = true;
          var monitorUid = this.__monitorUid;
          var monitorUid2 = this.__monitorUid2;
          this.triggerEvent('clearMonitor', monitorUid);
          this.triggerEvent('clearMonitor', monitorUid2);
          if (this.opt.isMpVideo) {
            this.triggerEvent('setMonitor', monitorUid2, {
              12: 1,
              13: 1
            });
            this.triggerEvent('sendMonitor', monitorUid2);
          } else {
            this.triggerEvent('setMonitor', monitorUid, {
              0: 1,
              1: 1
            });
            this.triggerEvent('sendMonitor', monitorUid);
          }
        }
        this.__reportData.last_ms = parseInt(resp.currentTime * 1000);
        this.__reportData.video_play_time = parseInt(resp.currentTime * 1000);
        this.reportCurRangeInfo({
          curTime: this.__reportData.last_ms
        });
        this.triggerEvent('timeupdate', resp);
      },
      onBeginPlay: function onBeginPlay() {
        var report = this.__reportData;
        report.client_time_when_play = Math.round(Date.now() / 1000);
        report.click_play_button = 1;

        !this.$refs.player.autoplay && this.recoverPlaybackRate();
        this.triggerEvent('beginPlay');
      },
      onDurationchange: function onDurationchange() {
        this.$refs.player.autoplay && this.recoverPlaybackRate();
      },
      onEnterFullscreen: function onEnterFullscreen() {
        if (this.$refs.player.needFeFullscreen && commonUtils.supportImmersiveMode) {
          this.__preventResize = true;
          setMpInfo.currentMpInfo({
            disableShowFinderLiveTopBar: 1,
            isDisableMenuHeader: true,
            itemShowType: '16'
          });
        }
      },
      onExitFullscreen: function onExitFullscreen() {
        var _this13 = this;

        document.body.style.backgroundColor = null;

        if (this.$refs.player.needFeFullscreen && commonUtils.supportImmersiveMode) {
          setMpInfo.currentMpInfo({
            disableShowFinderLiveTopBar: 0,
            isDisableMenuHeader: false,
            itemShowType: window.item_show_type
          });
          if (this.__resumeResizeTimeoutId) {
            clearTimeout(this.__resumeResizeTimeoutId);
          }
          this.__resumeResizeTimeoutId = setTimeout(function () {
            _this13.__resumeResizeTimeoutId = null;
            _this13.__preventResize = false;
          }, 500);
        }
      },
      onFullscreenchange: function onFullscreenchange(obj) {
        if (obj.state) {
          this.__kanReportData.has_full_screen = 1;
          document.body.style.backgroundColor = '#000';
        } else {
          document.body.style.backgroundColor = null;
        }

        if (obj.type === 'immersive' || obj.type === 'samelayer' && commonUtils.supportImmersiveMode || obj.type === 'frontend') {
          if (obj.state) {

            if (obj.type === 'immersive' || this.$refs.player.enableWcSlPlayerFullscreenAfterOrientationChange) {
              this.onEnterFullscreen();
            }
            this.setLoop(true);
            this.setVideoShareInfo();
            this.setVideoMenuItems();
            topBar.hideCurrentMpInfo();

            this.setOp23444ReportExData({
              FullscreenType: 2
            });
            this.setReload23445ReportExData({
              FullscreenType: 2
            });
            if (obj.type !== 'immersive') {
              var fullByOrientationChange = !this.opt.useImmersiveMode && obj.type === 'samelayer' && this.$refs.player && this.$refs.player.enableWcSlPlayerFullscreenAfterOrientationChange;
              this.reportOp23444({
                EventType: fullByOrientationChange ? 15 : 11,
                EventTime: this.getCurrentTimeMs(),
                FullscreenType: fullByOrientationChange ? 3 : 2
              });
              this.__enterImmersiveModeTime = new Date().getTime();
              this.reportLeave23443({
                EventType: 2,
                EventTime: this.getCurrentTimeMs(),
                PagePlayTime: this.getRealPlayTime(),
                PageStayTime: this.__enterImmersiveModeTime - this.__enterPageTime
              });
            }
            if (obj.type === 'immersive') {
              jsmonitorReport.setSum(283598, 0, 1);
            } else if (obj.type === 'frontend') {
              jsmonitorReport.setSum(283598, 1, 1);
            } else {
              jsmonitorReport.setSum(283598, 2, 1);
            }
          } else {

            this.setLoop(false);
            this.recoverVideoShareInfo();
            this.recoverVideoMenuItems();

            this.__enterPageTime = new Date().getTime();
            this.reportLeave23443({
              EventType: 3,
              EventTime: this.getCurrentTimeMs(),
              ImmersivePlayTime: this.getRealPlayTime(),
              ImmersiveStayTime: this.__enterPageTime - this.__enterImmersiveModeTime
            });
            this.setOp23444ReportExData({
              FullscreenType: 1
            });
            this.setReload23445ReportExData({
              FullscreenType: 1
            });
            if (obj.type !== 'immersive') {
              var fullByOrientationChange = !this.opt.useImmersiveMode && obj.type === 'samelayer' && this.$refs.player && this.$refs.player.enableWcSlPlayerFullscreenAfterOrientationChange;
              this.reportOp23444({
                EventType: fullByOrientationChange ? 16 : 14,
                EventTime: this.getCurrentTimeMs()
              });
            }
          }
        }

        if (this.topStickyInfoStatus > 0) {
          obj.state ? this.$refs.player.resumeOperating() : this.$refs.player.preventOperating();
        }

        this.triggerEvent('fullscreenchange', obj);
      },
      onOrientationStatusChange: function onOrientationStatusChange() {
        if (this.fullscreenStatus && this.$refs.player && (this.opt.useImmersiveMode || !this.$refs.player.isWcSlPlayer || !this.$refs.player.enableWcSlPlayerFullscreenAfterOrientationChange)) {
          var fullscreenType = this.orientationStatus === 0 ? 2 : 3;
          this.setOp23444ReportExData({
            FullscreenType: fullscreenType
          });
          this.setReload23445ReportExData({
            FullscreenType: fullscreenType
          });
          this.reportOp23444({
            EventType: this.orientationStatus === 0 ? 13 : 12,
            EventTime: this.getCurrentTimeMs()
          });
        }
      },
      onShareVideo: function onShareVideo() {
        var _this14 = this;

        if (this.opt.preview) {
          window.weui.alert('预览状态下无法分享视频');
          return;
        }

        window.customShareSource = 3;

        if (!this.fullscreenStatus) {

          this.setVideoShareInfo();
        }

        var recoverListener = function recoverListener(res) {

          var maskShowing = Mmversion.isIOS ? !!(res.hasFocus * 1) : !res.hasFocus;
          if (!maskShowing) {
            JSAPI.remove('onWindowFocusChanged', recoverListener);
            if (!_this14.fullscreenStatus) {
              setTimeout(_this14.recoverVideoShareInfo, 1000);
            }
            setTimeout(function () {
              return delete window.customShareSource;
            }, 1000);
          }
        };
        JSAPI.on('onWindowFocusChanged', recoverListener);

        this.reportOp23444({
          EventType: 24,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onPraiseVideo: function onPraiseVideo() {
        if (this.opt.preview) {
          window.weui.alert('预览状态下无法点赞视频');
          return;
        }

        this.playerOpt.isPraised = !this.playerOpt.isPraised;
        this.playerOpt.isPraised ? this.playerOpt.praiseNum++ : this.playerOpt.praiseNum--;
        oprImmersivePlayerData({
          biz: this.opt.__biz,
          vid: this.opt.vid,
          type: this.playerOpt.isPraised ? 3 : 5,
          styleType: 6
        });
        this.reportOp23444({
          EventType: 25,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onLikeVideo: function onLikeVideo(res) {
        if (this.opt.preview) {
          window.weui.alert('预览状态下无法在看视频');
          return;
        }

        var isLiked = res && res.recommend * 1 || !this.playerOpt.isLiked;

        if (res && res.comment) {
          this.showToast('已发送');
        } else if (!this.playerOpt.isLiked && isLiked) {
          this.playerOpt.likeNum++;
          if (cgiData.item_show_type * 1 === 5) {
            this.$store.commit('SET_RECOMMEND_STATUS', {
              hasRecommended: isLiked
            });
            this.$store.commit('SET_RECOMMEND_NUM', {
              recommendNum: this.playerOpt.likeNum
            });
          }
        } else if (this.playerOpt.isLiked && !isLiked) {
          this.showToast('已取消');
          this.playerOpt.likeNum--;
          if (cgiData.item_show_type * 1 === 5) {
            this.$store.commit('SET_RECOMMEND_STATUS', {
              hasRecommended: isLiked
            });
            this.$store.commit('SET_RECOMMEND_NUM', {
              recommendNum: this.playerOpt.likeNum
            });
          }
        }

        this.playerOpt.isLiked = isLiked;

        oprImmersivePlayerData({
          biz: this.opt.__biz,
          vid: this.opt.vid,
          mid: this.opt.mid,
          idx: this.opt.idx,
          comment: res && res.comment || '',
          type: isLiked ? 4 : 6,
          styleType: 7,
          onSuccess: function onSuccess() {
            connectWithApp(isLiked, res && res.comment || '');
          },
          onError: function onError() {
            if (res && res.comment && res.comment.length > MAX_RECOMMEND_LENGTH) {
              window.weui.alert('想法不可以超过%s字'.replace('%s', MAX_RECOMMEND_LENGTH));
            } else {
              window.weui.alert('网络异常，请稍后重试');
            }
          }
        }, cgiData);

        this.reportOp23444({
          EventType: 26,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onOpenSourcePage: function onOpenSourcePage() {
        this.triggerEvent('openSourcePage');
        this.reportOp23444({
          EventType: 20,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onShowSubscribe: function onShowSubscribe() {
        this.triggerEvent('showSubscribe');
        this.reportOp23444({
          EventType: 22,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onClickSubscribe: function onClickSubscribe() {
        this.triggerEvent('clickSubscribe');
        this.reportOp23444({
          EventType: 23,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onFastForward: function onFastForward() {
        this.triggerEvent('fastForward');
        this.reportOp23444({
          EventType: 17,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onReplay: function onReplay() {
        this.triggerEvent('replay');
      },
      onStatusChange: function onStatusChange(obj) {
        var report = this.__reportData;
        if (obj.status === 'loading' && (obj.subStatus === 'seeked' || obj.subStatus === 'seeking')) {
          this.initPlayRangeInfo({
            durationMs: report.duration_ms
          });
        }

        if (obj.status === 'pause') {
          this.computePlayTotalTimeForKyk(obj);
          this.__kanReportData.pause_cnt += 1;
        } else if (obj.status === 'play') {
          this.__videoReportInfo.every_start_play_time = Math.round(obj.currentTime * 1000);
        } else if (obj.status === 'end') {
          this.__videoReportInfo.every_end_play_time = Math.round(this.getCurrentTime() * 1000);
          console.log('real play time' + this.__videoReportInfo.total_play_time);
          this.__kanReportData.play_time = this.__videoReportInfo.total_play_time;
          this.__kanReportData.end_play_time = Date.parse(new Date()) / 1000;
          this.__kanReportData.has_end = 1;
          KanReport.reportKanData(this.__kanReportData);
        }

        if (obj.status === 'loading' && obj.subStatus === 'waiting') {
          var bufferType = 0;
          if (obj.preStatus === 'play') {
            bufferType = 1;
          } else if (obj.preStatus === 'loading' && obj.preSubStatus === 'seeked') {
            bufferType = 2;
          } else if (obj.preStatus === 'loading' && obj.preSubStatus === 'resolutionchange') {
            bufferType = 3;
          }
          this.reportPerf23442({
            EventType: 2,
            EventTime: this.getCurrentTimeMs(),
            Definition: this.getCurrentDefinition(),
            VideoWidth: this.playerOpt && this.playerOpt.videoWidth || 0,
            VideoHeight: this.playerOpt && this.playerOpt.videoHeight || 0,
            BufferType: bufferType
          });
        }

        this.triggerEvent('statusChange', obj);
      },
      onAfterReplay: function onAfterReplay() {
        this.triggerEvent('afterReplay');
      },
      onHandDragComplete: function onHandDragComplete(obj) {
        this.reportOp23444({
          EventType: 8,
          EventTime: this.getCurrentTimeMs(),
          BarBefore: obj.startDragVideoTime + '',
          BarAfter: obj.playTime + ''
        });

        this.triggerEvent('handDragComplete', obj);
      },
      onBarDragComplete: function onBarDragComplete(obj) {
        this.triggerEvent('barDragComplete', obj);
        this.reportOp23444({
          EventType: 7,
          EventTime: this.getCurrentTimeMs(),
          BarBefore: obj.startDragVideoTime + '',
          BarAfter: obj.playTime + ''
        });
      },
      onEnd: function onEnd() {
        var vInfo = this.__vInfo;
        var report = this.__reportData;
        var dynamicData = vInfo.dynamicData.data;
        var videoReportType = this.getReportTypeBySceneType();

        report.hasended = 1;

        VideoCtl.report({
          step: 7,
          vid: this.opt.vid,
          ext1: dynamicData.time * 1000,
          traceid: this.getTraceId(),
          orderid: this.getOrderid(),
          type: videoReportType,
          fromid: this.opt.fromid
        });

        if (!this.opt.loop) {
          this.triggerEvent('showEndContent');
        } else {
          this.__reportedPv = false;
          this.__reportData.replay = 1;
          this.qqVideoReport({ step: 3 });
        }
        this.triggerEvent('end', this.opt.loop);
        this.reportCurRangeInfo({
          curTime: report.last_ms
        });
        this.initPlayRangeInfo({
          durationMs: report.duration_ms
        });
      },
      onError: function onError(resp) {
        var report = this.__reportData;
        var monitorUid = this.__monitorUid;
        var monitorUid2 = this.__monitorUid2;

        if (!resp || !resp.errorcode || resp.errorcode > 5 || resp.errorcode <= 0) {
          report.videoerror = 46;
        } else {
          report.videoerror = resp.errorcode + 40;
        }

        if (this.opt.isMpVideo) {
          if (!this.__reportedPv) {
            this.__reportedPv = true;
            this.triggerEvent('setMonitor', monitorUid2, { 12: 1 });
          }
          this.triggerEvent('setMonitor', monitorUid2, { 14: 1 });
          switch (resp.errorcode * 1) {
            case 1:
              this.triggerEvent('setMonitor', monitorUid2, { 15: 1 });break;
            case 2:
              this.triggerEvent('setMonitor', monitorUid2, { 16: 1 });break;
            case 3:
              this.triggerEvent('setMonitor', monitorUid2, { 17: 1 });break;
            case 4:
              this.triggerEvent('setMonitor', monitorUid2, { 18: 1 });break;
            case 5:
              this.triggerEvent('setMonitor', monitorUid2, { 19: 1 });break;
            case 6:
              this.triggerEvent('setMonitor', monitorUid2, { 39: 1 });break;
            default:
              this.triggerEvent('setMonitor', monitorUid2, { 20: 1 });break;
          }
          this.triggerEvent('sendMonitor', monitorUid2);
        } else {
          if (!this.__reportedPv) {
            this.__reportedPv = true;
            this.triggerEvent('setMonitor', monitorUid, {
              0: 1
            });
          }
          this.triggerEvent('setMonitor', monitorUid, {
            2: 1,
            3: 1
          });
          switch (resp.errorcode * 1) {
            case 1:
              this.triggerEvent('setMonitor', monitorUid, { 4: 1 });break;
            case 2:
              this.triggerEvent('setMonitor', monitorUid, { 5: 1 });break;
            case 3:
              this.triggerEvent('setMonitor', monitorUid, { 6: 1 });break;
            case 4:
              this.triggerEvent('setMonitor', monitorUid, { 7: 1 });break;
            case 5:
              this.triggerEvent('setMonitor', monitorUid, { 8: 1 });break;
            default:
              this.triggerEvent('setMonitor', monitorUid, { 9: 1 });break;
          }
          this.triggerEvent('sendMonitor', monitorUid);
          this.triggerEvent('sendMonitor', monitorUid2);
        }

        report.v_err_code = resp.errorcode;
        this.showError();
        this.qqVideoReport({
          step: 1999,
          val: report.videoerror
        });
        this.initPlayRangeInfo({
          durationMs: report.duration_ms
        });
      },
      onFirstBufferingTime: function onFirstBufferingTime(obj) {

        this.reportPerf23442({
          EventType: 1,
          EventTime: this.getCurrentTimeMs(),
          Definition: this.getCurrentDefinition(),
          VideoWidth: this.playerOpt && this.playerOpt.videoWidth || 0,
          VideoHeight: this.playerOpt && this.playerOpt.videoHeight || 0,
          BufferTime: obj.bufferingTime
        });
        var playType = undefined;
        if (!this.__hasFirstPlayed) {
          if (this.$refs.player.autoplay) {
            playType = 1;
          } else {
            playType = 2;
          }
        } else {
          playType = 3;
        }
        this.reportPlay23440({
          PlayType: playType
        });

        this.__kanReportData.start_play_time = Date.parse(new Date()) / 1000;

        if (!this.__hasFirstPlayed) {
          this.__hasFirstPlayed = true;
        } else {
          this.__kanReportData.replay_cnt += 1;

          var defaultData = {
            rec_expand: pageUtils.getParam('rec_expand') || '',
            scene: pageUtils.getParam('scene') || '',
            report_action: 1,
            vid: this.opt.vid,
            end_play_time: 0,
            play_time: 0,
            has_end: 0,
            pause_cnt: 0,
            auto_play: this.opt.autoplay ? 1 : 0,
            has_full_screen: this.fullscreenStatus ? 1 : 0
          };

          this.__videoReportInfo = {
            hasUnloadReport: false,
            hasApiReport: false,
            every_start_play_time: 0,
            every_end_play_time: 0,
            total_play_time: 0
          };

          this.__kanReportData = _extends(this.__kanReportData, defaultData);
        }

        this.triggerEvent('firstBufferingTime', obj);
      },
      onPlayingBufferingTime: function onPlayingBufferingTime(obj) {
        this.reportPerf23442({
          EventType: 3,
          EventTime: this.getCurrentTimeMs(),
          Definition: this.getCurrentDefinition(),
          VideoWidth: this.playerOpt && this.playerOpt.videoWidth || 0,
          VideoHeight: this.playerOpt && this.playerOpt.videoHeight || 0,
          BufferTime: obj.bufferingTime
        });

        this.triggerEvent('playingBufferingTime', obj);
      },
      onFlowNotice: function onFlowNotice(obj) {
        this.reportPerf23442({
          EventType: 5,
          EventTime: this.getCurrentTimeMs(),
          Definition: this.getCurrentDefinition(),
          VideoWidth: this.playerOpt && this.playerOpt.videoWidth || 0,
          VideoHeight: this.playerOpt && this.playerOpt.videoHeight || 0,
          Traffic: obj.flow
        });

        this.triggerEvent('flowNotice', obj);
      },
      onUserplay: function onUserplay(resp) {
        this.triggerEvent('userplay', resp);
        var eventType = 6;
        if (resp.tapType === 1) {
          eventType = 4;
        } else if (resp.tapType === 2) {
          eventType = 2;
        }
        this.reportOp23444({
          EventType: eventType,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onUserpause: function onUserpause(resp) {
        this.triggerEvent('userpause', _extends({
          curTime: this.getCurrentTime()
        }, resp));
        var report = this.__reportData;
        report.pause_num = (report.pause_num || 0) + 1;
        var eventType = 5;
        if (resp.tapType === 1) {
          eventType = 3;
        } else if (resp.tapType === 2) {
          eventType = 1;
        }
        this.reportOp23444({
          EventType: eventType,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onWaiting: function onWaiting(resp) {
        var _this15 = this;

        if (!Mmversion.isWechat || !Mmversion.isAndroid || !Mmversion.gtVersion('7.0.16', 1)) {

          return;
        }
        var resolutionNameMap = {
          '自动': '20003',
          '超清': '10002',
          '高清': '10003',
          '流畅': '10004'
        };
        var NETTYPE = {
          'WiFI': 1,
          '2G': 2,
          '3G': 3,
          '4G': 4
        };

        if (resp) {
          (function () {
            var reTryTimes = 3;

            var player = _this15.$refs.player;
            var videoData = player.getResolutionInfo();
            var resolutionSrc = videoData ? videoData.src : null;
            var loadRetryTime = _this15.opt.auto.loadRetryTime;
            var autoTipFlag = _this15.opt.auto.isShowTip;
            var autoTipFlagHandler = null;
            var HIDE_CONTROL_TIP_TIMEOUT = 5 * 1000;

            var js_auto_change_tip_mask = $('.js_auto_change_tip_mask')[0];
            var autoSrc = undefined;
            var definitionBefore = undefined;

            var resolutionInfoo = _this15.__vInfo.dynamicData ? _this15.__vInfo.dynamicData.data.ori_url_info.map(function (info) {
              var name = info.video_quality_wording;
              var formatId = resolutionNameMap[name];
              return { formatId: formatId, src: info.url, name: name };
            }) : [];

            for (var i = 0; i < resolutionInfoo.length; i++) {
              if (resolutionInfoo[i].formatId === '20003') autoSrc = resolutionInfoo[i].src;
              if (resolutionInfoo[i].src === resolutionSrc) {
                definitionBefore = g.formatIdMap[[resolutionInfoo[i].formatId]];
              }
            }

            var __bindAutoEvent = function __bindAutoEvent(opt) {
              var js_play_auto_btn = $('.js_auto_change_tip')[0];
              DomEvent.tap(js_play_auto_btn, function () {

                _this15.opt.auto.isChangeAuto = true;
                _this15.triggerEvent('autoTip', {
                  networkType: networkType,
                  DefinitionBefore: opt.definitionBefore
                });
              });
            };

            var _closeTip = function _closeTip() {
              DomEvent.on(js_auto_change_tip_mask, 'tap', function (e) {
                e.cancelBubble = true;
                player.autoChangeTip({
                  type: 'autoChange',
                  option: 'hide'
                });
                player.hideControlBar();
              });
            };

            var __hideControllTimeout = function __hideControllTimeout() {
              if (!!autoTipFlagHandler) {
                clearTimeout(autoTipFlagHandler);
              }
              autoTipFlagHandler = setTimeout(function () {
                player.autoChangeTip({
                  type: 'autoChange',
                  option: 'hide'
                });
              }, HIDE_CONTROL_TIP_TIMEOUT);
            };

            var _showChangeTip = function _showChangeTip() {
              player.hideControlBar();
              player.autoChangeTip({
                type: 'autoChange',
                option: 'show'
              });
              autoTipFlag = true;
              var networkType = -1;
              JSAPI.invoke('getNetworkType', {}, function (res) {
                networkType = NETTYPE[g.netTypeMap[res.err_msg]] || 0;
                if (res.err_msg == 'network_type:edge' || res.err_msg == 'network_type:wwan') {
                  if (res.detailtype || res.subtype) {
                    networkType = NETTYPE[res.detailtype] || NETTYPE[res.subtype];
                  }
                }
              });
              __bindAutoEvent({
                networkType: networkType,
                definitionBefore: definitionBefore
              });

              _this15.triggerEvent('showTip');
            };

            var action = resp.action;
            if (resolutionSrc !== autoSrc && autoSrc) {
              if (!autoTipFlag) {
                if (action === 'changeToAuto' || ++loadRetryTime > reTryTimes) {
                  _showChangeTip();
                  __hideControllTimeout();
                  _closeTip();
                } else {
                  _this15.opt.auto.loadRetryTime += 1;
                }
              }
            }
            _this15.opt.auto.isShowTip = autoTipFlag;
          })();
        }
      },
      onPlay: function onPlay(resp) {
        var _this16 = this;

        if (this.opt.auto.isChangeAuto === true && this.opt.auto.isShowSuc === false) {
          if (this.$refs.player.getResolutionInfo() && this.$refs.player.getResolutionInfo().src.indexOf('m3u8')) {
            (function () {

              var autoSucTipHandler = null;
              var HIDE_SUC_TIP_TIMEOUT = 4 * 1000;
              var __hideSucTipTimeOut = function __hideSucTipTimeOut() {
                if (!!autoSucTipHandler) {
                  clearTimeout(autoSucTipHandler);
                }
                autoSucTipHandler = setTimeout(function () {
                  _this16.$refs.player.autoChangeTip({
                    type: 'autoSuc',
                    option: 'hide'
                  });
                }, HIDE_SUC_TIP_TIMEOUT);
              };

              _this16.$refs.player.hideControlBar();
              _this16.$refs.player.autoChangeTip({
                type: 'autoSuc',
                option: 'show'
              });
              __hideSucTipTimeOut();
              _this16.opt.auto.isShowSuc = true;
            })();
          }
        }

        if (this.__pauseTimestamp) {
          this.reportOp23444({
            EventType: 18,
            EventTime: this.getCurrentTimeMs(),
            PauseTime: Date.now() - this.__pauseTimestamp
          });
          delete this.__pauseTimestamp;
        }

        this.triggerEvent('play', resp);
      },
      onPause: function onPause(resp) {
        this.triggerEvent('pause', resp);
        this.__pauseTimestamp = Date.now();
      },
      onMidPlayClick: function onMidPlayClick() {
        this.reportOp23444({
          EventType: 19,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onAfterCheckVideoFit: function onAfterCheckVideoFit(obj) {
        var videoFitReportData = {
          97: 1 // 检测视频是否可去黑边次数
        };
        if (obj.needToFit === true) {
          videoFitReportData['98'] = 1;
          videoFitReportData['100'] = 1;
          if (obj.os.ios) {
            videoFitReportData['103'] = 1;
          }
          if (obj.os.android) {
            videoFitReportData['106'] = 1;
          }
          if (obj.supportObjectFit === true) {
            videoFitReportData['101'] = 1;
            if (obj.os.ios) {
              videoFitReportData['104'] = 1;
            }
            if (obj.os.android) {
              videoFitReportData['107'] = 1;
            }
          }
        }
        var monitorUid = this.__monitorUid;
        this.triggerEvent('setMonitor', monitorUid, videoFitReportData);
        this.triggerEvent('sendMonitor', monitorUid);
      },
      onBindError: function onBindError(resp) {
        this.triggerEvent('bindError', resp);
      },
      onRateChange: function onRateChange(resp) {
        this.triggerEvent('rateChange', resp);
        if (resp.action === 'changed') {
          this.cacheData();
          this.reportOp23444({
            EventType: 9,
            EventTime: this.getCurrentTimeMs(),
            SpeedBefore: resp.rateBefore + '',
            SpeedAfter: resp.rateAfter + ''
          });
        }
      },
      onResolutionChange: function onResolutionChange(resp) {
        if (resp.action === 'changed') {
          g.playerStatus.formatId = resp.infoAfter && resp.infoAfter.formatId || null;
          cachePlayerStatus();
          this.reportOp23444({
            EventType: 10,
            EventTime: this.getCurrentTimeMs(),
            DefinitionBefore: g.formatIdMap[resp.infoBefore.formatId] + '',
            DefinitionAfter: g.formatIdMap[resp.infoAfter.formatId] + ''
          });

          this.setPerf23442ReportExData({
            DefinitionBefore: g.formatIdMap[resp.infoBefore.formatId],
            VideoWidthBefore: resp.infoBefore.width,
            VideoHeightBefore: resp.infoBefore.height
          });
        }
        this.triggerEvent('resolutionChange', resp);
      },
      onBrightnessChange: function onBrightnessChange(resp) {
        this.triggerEvent('brightnessChange', resp);
      },
      onVolumeChange: function onVolumeChange(resp) {
        this.triggerEvent('volumeChange', resp);
      },
      onProfileJump: function onProfileJump(resp) {
        this.triggerEvent('profileJump', resp);
        this.reportOp23444({
          EventType: 21,
          EventTime: this.getCurrentTimeMs()
        });
      },
      onProcessStateChange: function onProcessStateChange(resp) {

        this.triggerEvent('processStateChange', resp);
      },
      onCanplay: function onCanplay(resp) {
        this.triggerEvent('canplay', resp);
      },
      onShowControlBar: function onShowControlBar(resp) {
        this.triggerEvent('showControlBar', resp);
      },
      onHideControlBar: function onHideControlBar(resp) {
        this.triggerEvent('hideControlBar', resp);
      },
      onShowMenu: function onShowMenu(resp) {
        this.triggerEvent('showMenu', resp);
      },
      triggerEvent: function triggerEvent(evt) {
        var plugins = [].concat(this.$refs.innerPlugins || [], this.$refs.coverPlugins || [], this.$refs.controlPlugins || [], this.__legacyPlugins);
        var blockPlugin = this.__blockPlugin[evt] || this.__blockPlugin.all;

        var r = undefined;
        var data = undefined;
        var blockOther = 0;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (!!blockPlugin && typeof blockPlugin.recv === 'function') {
          r = blockPlugin.recv.apply(blockPlugin, [evt].concat(args));
          if (Object.prototype.toString.call(r) == '[object Object]') {
            blockOther |= r.code;
            data = r.data;
          } else {
            blockOther |= r;
          }
          if (blockOther & 0x1) {
            return data;
          }
        }

        for (var i = 0, len = plugins.length; i < len; ++i) {
          try {
            var _plugins$i;

            r = (_plugins$i = plugins[i]).recv.apply(_plugins$i, [evt].concat(args));
          } catch (err) {
            console.error('player controller plugin error:', err, evt, args);
          }
          if (Object.prototype.toString.call(r) == '[object Object]') {
            blockOther |= r.code;
            data = r.data;
          } else {
            blockOther |= r;
          }
          if (blockOther & 0x2) {
            break;
          }
        }

        if (!this._blockInnerHandler && !(blockOther & 0x4)) {
          var innerHandler = this[evt + 'InnerHandler'];
          if (!!innerHandler) {
            r = innerHandler.apply(this, [evt].concat(args));
            if (Object.prototype.toString.call(r) == '[object Object]') {
              data = r.data;
            }
          }
        }

        if (!(blockOther & 0x8)) {

          this.emitEvent.apply(this, [evt.replace(/[A-Z]/g, function (l) {
            return '-' + l.toLowerCase();
          })].concat(args));
        }

        return data;
      },
      emitEvent: function emitEvent(evt) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        evt && this.$emit.apply(this, [evt].concat(args));
      },
      setBlockPlugin: function setBlockPlugin(evt, plugin) {

        this.__blockPlugin[evt] = plugin;
      },
      replaceByTxVideo: function replaceByTxVideo() {
        var _this17 = this;

        if (!this.opt.ckey && !this.opt.isMpVideo) {
          this.__isShowTx = true;
          var $dom = $(this.$el);
          var id = $dom.attr('id');

          if (!id) {
            id = 'js_tx_video_container_' + Math.random();
            $dom.attr('id', id);
          }

          var safeTop = safeAreaInsets && safeAreaInsets.top || 60;

          if (this.opt.useImmersiveMode) {
            $dom.css('padding-top', safeTop + 'px');
            $dom.css('padding-bottom', '60px');
          }

          JSAPI.invoke('handleDeviceInfo', {
            action: 'setOrientation',
            orientation: 0,
            lock: true
          });

          TxVideoUtils.createTxVideo({
            win: window,
            containerId: id,
            vid: this.opt.vid,
            width: this.opt.useImmersiveMode ? window.screen.width : this.__gWidth,
            height: this.opt.useImmersiveMode ? window.screen.height - safeTop - 60 : this.__gHeight,
            autoplay: false,
            allowFullScreen: true,
            onSuccess: function onSuccess(opt) {
              _this17.__txPlayer = opt.player;

              _this17.__dataCount = _this17.__targetDataCount;
              _this17.videoDataReady();
            },
            onError: function onError() {}
          });

          var monitorUid = this.__monitorUid;
          var _cgiData = this.$store.state.cgiData;
          if (_cgiData.is_login == 1) {
            this.triggerEvent('setMonitor', monitorUid, {
              38: 1
            });
          } else {
            this.triggerEvent('setMonitor', monitorUid, {
              39: 1
            });
          }
          this.triggerEvent('sendMonitor', monitorUid);
          return true;
        }
        return false;
      },
      getPlayer: function getPlayer() {
        return this.$refs.player;
      },
      supportWcSlPlayer: function supportWcSlPlayer() {
        return !!this.$refs.player && this.$refs.player.supportWcSlPlayer();
      },
      initPlayRangeInfo: function initPlayRangeInfo(opt) {

        if (opt.durationMs <= 0) {
          return;
        }
        var totalRange = this.opt.totalRange;
        if (totalRange * 1000 >= opt.durationMs) {
          this.__playRangeInfo = _createRangeInfo(1000, opt.durationMs);
        } else {
          this.__playRangeInfo = _createRangeInfo(Math.ceil(opt.durationMs / totalRange), opt.durationMs);
        }

        function _createRangeInfo(_splitTime, _durationMs) {
          var data = [{
            start: 0,
            end: _splitTime,
            hasReport: false
          }];
          while (true) {
            var last = data[data.length - 1];
            if (last.end >= _durationMs) {
              break;
            }
            data.push({
              start: last.end,
              end: last.end + _splitTime,
              hasReport: false
            });
          }
          return data;
        }
      },
      reportCurRangeInfo: function reportCurRangeInfo(opt) {

        var data = this.__playRangeInfo;
        if (!data || data.length === 0) {
          return;
        }
        var len = data.length;
        for (var i = 0; i < len; i++) {
          var a = data[i];
          if (a.start < opt.curTime && a.end >= opt.curTime) {
            if (!a.hasReport) {
              a.hasReport = true;
              VideoCtl.report({
                step: 14,
                vid: this.opt.vid,
                hit_bizuin: this.opt.hitBizuin,
                hit_vid: this.opt.hitVid,
                traceid: this.getTraceId(),
                orderid: this.getOrderid(),
                ori_status: this.getOriStatus(),
                type: this.getReportTypeBySceneType(),
                fromid: this.getFromid(),
                total_range: len,
                current_range: i + 1,
                duration: this.__reportData.duration_ms || data[len - 1].end
              });
            }
            break;
          }
        }
      },
      getTraceId: function getTraceId() {
        return 0;
      },
      getOrderid: function getOrderid() {
        return 0;
      },
      getOriStatus: function getOriStatus() {

        return this.opt.oriStatus;
      },
      getFromid: function getFromid() {
        return this.opt.fromid;
      },
      qqVideoReport: function qqVideoReport(d) {

        var data = {
          step: d.step,
          loadwait: d.loadwait || 0,

          val: d.val || 0,
          vid: this.opt.vid
        };
        if (d.step == 6) {
          data.vt = this.__reportData.vt;
        }
        Report.qqvideo_common_report(data);
      },
      showEndContentInnerHandler: function showEndContentInnerHandler() {
        if (this.$refs.player.isWcSlPlayer) {
          this.$refs.player.showCover();
        } else {
          this.$refs.player.resetVideo();
        }
      },
      danmuPluginInitedInnerHandler: function danmuPluginInitedInnerHandler() {
        if (this.__hasReport23439Enter) {
          this.reportEnter23439();
        }
      },
      getPlayerReportData: function getPlayerReportData() {

        var __reportData = this.__reportData;
        var player = this.$refs.player;
        if (!!player) {
          __reportData.play_time = this.getRealPlayTime();
          __reportData.full_screen = this.fullscreenStatus ? 1 : 0;
          __reportData.quick_play = player.hasSeeked() ? 1 : 0;
          __reportData.drag_times = player.getSeekedTimes().join(':|:');
        }
        __reportData.webviewid = VideoCtl.getWebviewid();
      },
      pause: function pause() {
        this.$refs.player && this.$refs.player.pause4outer();
      },
      play: function play() {
        this.$refs.player && this.$refs.player.play4outer();
      },
      topStickyInfoPlay: function topStickyInfoPlay() {
        var player = this.$refs.player;
        if (player) {
          if (player.isEnd()) {
            player.replay();
          } else {
            player.play4outer();
          }
        }
      },
      getRealPlayTime: function getRealPlayTime() {

        var time = 0;
        var player = this.$refs.player;
        if (player) {
          time = Math.round(player.getPlayTotalTime() * 1000);
        }
        return time;
      },
      getCurrentTime: function getCurrentTime() {

        var time = 0;
        var player = this.$refs.player;
        if (player) {
          time = player.getCurTime();
        }
        return time;
      },
      getCurrentTimeMs: function getCurrentTimeMs() {

        return Math.round(this.getCurrentTime() * 1000);
      },
      getVideoData: function getVideoData() {
        return this.__vInfo && this.__vInfo.dynamicData && this.__vInfo.dynamicData.data ? this.__vInfo.dynamicData.data : null;
      },
      getReportData: function getReportData() {
        return this.__reportData;
      },
      extendMpReportData: function extendMpReportData(d) {
        _extends(this.__reportData, d);
      },
      getMpReportData: function getMpReportData() {

        return this.__reportData;
      },
      recoverPlaybackRate: function recoverPlaybackRate() {
        var _this18 = this;

        var status = this.__vInfo.status;
        var playbackRate = status && status.playbackRate || 1;

        this.$refs.player.setPlaybackRate(playbackRate);

        if (this.$refs.player.isWcSlPlayer) {
          setTimeout(function () {
            return _this18.$refs.player.setPlaybackRate(playbackRate);
          }, 250);
        }
      },
      setLoop: function setLoop(loop) {
        this.opt && (this.opt.loop = loop);
        this.playerOpt && (this.playerOpt.loop = loop);
      },
      setAutoplay: function setAutoplay(autoplay) {
        this.$refs.player && (this.$refs.player.autoplay = autoplay);
      },
      setVideoSize: function setVideoSize(size) {
        if (!this.playerOpt) {
          return;
        }
        if (typeof size.width === 'number') {
          this.playerOpt.width = size.width;
        }
        if (typeof size.height === 'number') {
          this.playerOpt.height = size.height;
        }
      },
      setVideoTopSticky: function setVideoTopSticky() {
        var _this19 = this;

        var player = this.$refs.player;
        var top = -this.$el.getBoundingClientRect().top;
        if (!player || top < 0) {
          return this.unsetVideoTopSticky();
        }

        var isPlaying = player.isPlay() || this.topStickyExpendWhenPaused;
        var diffLmt = this.opt.height - this.opt.width * 3 / 4;
        var diff = Math.max(0, Math.min(top, diffLmt));
        var wrapHeight = isPlaying ? this.opt.height - diff : Math.max(this.opt.height - top, 72);

        this.wrapStyle = {
          position: 'fixed',
          zIndex: 9,
          top: 0,
          transition: this.__isPlayingWhenLastStick !== isPlaying ? 'height .2s ease-out' : 'height 0s',
          height: wrapHeight + 'px'
        };

        if (this.supportWcSlPlayer()) {
          (function () {
            var videoScale = 1 - diff / _this19.opt.height;
            var videoTransformTransition = _this19.__isPlayingWhenLastStick !== isPlaying ? 'transform .25s' : 'transform 0s';
            var videoTransformOriginTransition = isPlaying && diffLmt < 0 ? 'transform-origin .25s linear' : 'transform-origin 0s';

            if (wrapHeight > 72 || _this19.topStickyInfoStatus === 0) {
              _this19.videoStyle = {
                bottom: 0,
                position: 'absolute',
                transition: videoTransformOriginTransition + ', ' + videoTransformTransition,
                transform: 'scale3d(' + videoScale + ', ' + videoScale + ', 1.1)',
                transformOrigin: 'bottom'
              };
            }

            if (wrapHeight > 72) {
              _this19.resetVideoTopStickyInfo();
            } else if (_this19.topStickyInfoStatus === 0) {
              _this19.__topStickyAnimTimer = setTimeout(function () {
                if (_this19.topStickyInfoStatus > 200) {
                  var videoInfoScale = 135 / _this19.opt.width;
                  _this19.videoStyle = {
                    bottom: 0,
                    position: 'absolute',
                    transition: (diffLmt < 0 ? videoTransformOriginTransition : 'transform-origin .2s') + ', transform .25s',
                    transform: 'scale3d(' + videoInfoScale + ', ' + videoInfoScale + ', 1.1) translate(0, ' + (_this19.opt.height * videoInfoScale - wrapHeight) + 'px)',
                    transformOrigin: 'left bottom',
                    zIndex: 999
                  };
                  _this19.__topStickyAnimTimer = setTimeout(function () {
                    _this19.setTopStickyInfoStatus({ status: player.isEnd() ? 2 : 1 });
                    _this19.__topStickyAnimTimer = null;
                  }, 200);
                  _this19.setTopStickyInfoStatus({ status: player.isEnd() ? 204 : 203 });
                }
              }, 200);
              player.preventOperating();
              _this19.setTopStickyInfoStatus({ status: player.isEnd() ? 202 : 201 });
            }

            _this19.__isPlayingWhenLastStick = isPlaying;
          })();
        }
      },
      unsetVideoTopSticky: function unsetVideoTopSticky() {
        this.wrapStyle = null;
        if (this.supportWcSlPlayer()) {
          this.videoStyle = null;
          this.resetVideoTopStickyInfo();
        }
      },
      resetVideoTopStickyInfo: function resetVideoTopStickyInfo() {
        if (this.topStickyInfoStatus > 0) {
          var player = this.$refs.player;
          player && player.resumeOperating();
          this.setTopStickyInfoStatus({ status: 0 });
          if (this.__topStickyAnimTimer) {
            clearTimeout(this.__topStickyAnimTimer);
            this.__topStickyAnimTimer = null;
          }
        }
      },
      enableTopSticky: function enableTopSticky() {
        if (!this.__videoTopStickyEnabled) {
          window.addEventListener('scroll', this.setVideoTopSticky);
          this.__videoTopStickyEnabled = true;
        }
      },
      disableTopSticky: function disableTopSticky() {
        if (this.__videoTopStickyEnabled) {
          window.removeEventListener('scroll', this.setVideoTopSticky);
          this.__videoTopStickyEnabled = false;
        }
      },
      setVideoShareInfo: function setVideoShareInfo() {
        if (this.playerOpt) {
          var _cgiData2 = this.$store.state.cgiData;
          if (window.item_show_type === '0') {
            var immersiveVideoPageShareLink = ['https://mp.weixin.qq.com/s?item_show_type=16', '&vid=', this.opt.vid, '&__biz=', this.opt.__biz, '&mid=', this.opt.mid, '&idx=', this.opt.idx, '&sn=', _cgiData2.sn || '', '#wechat_redirect'].join('');
            window.customShareInfo = {
              vid: this.opt.vid,
              link: immersiveVideoPageShareLink,
              img_url: this.playerOpt.cover,
              img_width: '120',
              img_height: '90',
              forbid_msg: this.opt.preview ? '预览状态下无法#op#视频' : _cgiData2.isPaySubscribe ? '付费图文内视频暂不支持#op#' : null
            };
            setMpInfo.currentMpInfo({
              vid: this.opt.vid,
              duration: this.playerOpt.duration,
              VideoWidth: this.playerOpt && this.playerOpt.videoWidth || 120,
              VideoHeight: this.playerOpt && this.playerOpt.videoHeight || 90,
              videoCover: this.playerOpt.cover,
              customSnapShot: Mmversion.isIOS && this.__floatCoverBase64 || '',
              isMenuShowBrandInfo: 0,
              itemShowType: '16'
            });
          } else if (window.item_show_type === '5') {
            var immersiveVideoPageShareLink = ['https://mp.weixin.qq.com/s?t=pages/video_detail_new&item_show_type=16&scene=#scene#', '&vid=', this.opt.vid, '&__biz=', this.opt.__biz, '&mid=', this.opt.mid, '&idx=', this.opt.idx, '&sn=', _cgiData2.sn || '', '&vidsn=', _cgiData2.vidsn || '', '#wechat_redirect'].join('');
            window.customShareInfo = {
              vid: this.opt.vid,
              link: immersiveVideoPageShareLink,
              img_url: this.playerOpt.cover,
              img_width: '120',
              img_height: '90',
              forbid_msg: this.opt.preview ? '预览状态下无法#op#视频' : _cgiData2.isPaySubscribe ? '付费图文内视频暂不支持#op#' : null
            };
            setMpInfo.currentMpInfo({
              customSnapShot: Mmversion.isIOS && this.__floatCoverBase64 || '',
              isMenuShowBrandInfo: 0,
              itemShowType: '16'
            });
          }
          setTopBarWhenVisible(false);
          topBar.setTopBar();
        }
      },
      recoverVideoShareInfo: function recoverVideoShareInfo() {
        if (this.playerOpt) {
          if (window.item_show_type === '0') {
            delete window.customShareInfo;
            setMpInfo.currentMpInfo({
              vid: '',
              duration: 0,
              videoWidth: 0,
              videoHeight: 0,
              videoCover: '',
              customSnapShot: '',
              isMenuShowBrandInfo: 1,
              itemShowType: '0'
            });
          } else if (window.item_show_type === '5') {
            setMpInfo.currentMpInfo({
              customSnapShot: '',
              isMenuShowBrandInfo: 1,
              itemShowType: '5'
            });
          }
          setTopBarWhenVisible(true);
          topBar.setTopBar();
        }
      },
      setVideoMenuItems: function setVideoMenuItems() {
        if (this.fullscreenStatus && this.$refs.player && this.$refs.player.needFeFullscreen && commonUtils.supportImmersiveMode) {
          if (this.opt.preview) {
            JSAPI.invoke('hideMenuItems', {
              menuList: ['menuItem:share:appMessage']
            });
          } else if (this.banOprStatus || this.$store.state.cgiData.isPaySubscribe) {
            JSAPI.invoke('hideMenuItems', {
              menuList: ['menuItem:share:appMessage', 'menuItem:share:timeline']
            });
            JSAPI.invoke('handleHaokanAction', {
              action: RECOMMEND_ACTION_CLIENT,
              permission: 0
            });
          } else {
            if (!this.banOprStatus) {
              JSAPI.invoke('showMenuItems', {
                menuList: ['menuItem:share:appMessage', 'menuItem:share:timeline']
              });
            }
            JSAPI.invoke('handleHaokanAction', {
              action: RECOMMEND_ACTION_CLIENT,
              permission: 1,
              recommend: this.playerOpt.isLiked ? 1 : 0
            });
          }
        }
      },
      recoverVideoMenuItems: function recoverVideoMenuItems() {
        if (this.opt.preview) {
          JSAPI.invoke('showMenuItems', {
            menuList: ['menuItem:share:appMessage']
          });
        } else {
          JSAPI.invoke('showMenuItems', {
            menuList: ['menuItem:share:appMessage', 'menuItem:share:timeline']
          });
          JSAPI.invoke('handleHaokanAction', {
            action: RECOMMEND_ACTION_CLIENT,
            permission: 1,
            recommend: window.__article_liked__ ? 1 : 0
          });
        }
      },
      getFloatCoverBase64: function getFloatCoverBase64(coverUrl) {
        var _this20 = this;

        var img = new Image();
        img.crossOrigin = 'anonymous';
        img.onload = function () {
          img.onload = null;
          img.onerror = null;

          try {
            var w = img.naturalWidth || img.width;
            var h = img.naturalHeight || img.height;
            var myCanvas = document.createElement('canvas');
            var ctx = myCanvas.getContext('2d');
            var ctxW = 640;
            var ctxH = 1280;
            myCanvas.width = ctxW;
            myCanvas.height = ctxH;
            myCanvas.style.width = ctxW + 'px';
            myCanvas.style.height = ctxH + 'px';
            var size = getObjectFitSize('contain', ctxW, ctxH, w, h);
            ctx.drawImage.apply(ctx, [img].concat(_toConsumableArray(size)));
            ctx.beginPath();
            ctx.moveTo(ctxW / 2 - 50, ctxH / 2 - 60);
            ctx.lineTo(ctxW / 2 - 50, ctxH / 2 + 60);
            ctx.lineTo(ctxW / 2 + 50, ctxH / 2);
            ctx.fillStyle = 'rgba(255,255,255,0.8)';
            ctx.strokeStyle = 'rgba(255,255,255,0.8)';
            ctx.shadowBlur = 100;
            ctx.shadowColor = 'rgba(0,0,0,0.5)';
            ctx.fill();
            ctx.closePath();
            ctx.stroke();
            _this20.__floatCoverBase64 = myCanvas.toDataURL('image/jpeg', 0);
            _this20.__floatCoverBase64 = _this20.__floatCoverBase64.replace('data:image/jpeg;base64,', '');
            if (_this20.opt.useImmersiveMode) {
              _this20.setVideoShareInfo();
            }
          } catch (e) {
            _this20.__floatCoverBase64 = '';
            console.error(e);
          }
        };
        img.onerror = function () {
          _this20.__floatCoverBase64 = '';
          img.onload = null;
          img.onerror = null;
        };
        img.src = coverUrl;
      },
      showToast: function showToast(tips) {
        var _this21 = this;

        if (this.__toastTimeoutId) {
          clearTimeout(this.__toastTimeoutId);
        }
        this.toastTips = tips;
        this.__toastTimeoutId = setTimeout(function () {
          _this21.__toastTimeoutId = null;
          _this21.toastTips = '';
        }, 1000);
      },
      reportPv23447: function reportPv23447() {
        var cgiData = this.$store.state.cgiData;
        Ajax({
          type: 'POST',
          timeout: 2000,
          url: ['https://mp.weixin.qq.com/s?action=report&item_show_type=16', '&vid=', this.opt.vid, '&__biz=', this.opt.__biz, '&mid=', this.opt.mid, '&idx=', this.opt.idx, '&sn=', cgiData.sn || ''].join('')
        });
      },
      computePlayTotalTimeForKyk: function computePlayTotalTimeForKyk(obj) {
        this.__videoReportInfo.every_end_play_time = Math.round(obj.currentTime * 1000);
        this.__videoReportInfo.total_play_time += this.__videoReportInfo.every_end_play_time - this.__videoReportInfo.every_start_play_time;
        console.log('real play time**********' + this.__videoReportInfo.total_play_time);
      },
      getCurrentDefinition: function getCurrentDefinition() {
        if (g.playerStatus.formatId) {
          return g.formatIdMap[g.playerStatus.formatId];
        }
        if (this.__vInfo.dynamicData) {
          return g.formatIdMap[this.__vInfo.dynamicData.data.formatid];
        }
        return 0;
      }
    })
  });

  function formatMpVideoInfo(resp) {
    var formatMap = {};
    for (var i = 0; i < resp.url_info.length; i++) {
      var a = resp.url_info[i];
      switch (a.format_id * 1) {
        case 20003:
          if (Mmversion.isWechat && Mmversion.isAndroid && Mmversion.gtVersion('7.0.16', 1)) {
            formatMap['1080p'] = { index: i };
          }
          break;
        case 10002:
          formatMap['720p'] = { index: i };break;
        case 10003:
          formatMap['480p'] = { index: i };break;
        case 10004:
          formatMap['270p'] = { index: i };break;
      }
    }
    var info = undefined;
    if (g.playerStatus && g.playerStatus.formatId && g.networkType !== '3g' && g.networkType !== '2g' && resp.is_mp_video_urgent_state * 1 !== 1) {
      switch (g.playerStatus.formatId * 1) {
        case 10002:
          if (formatMap['720p']) {
            info = resp.url_info[formatMap['720p'].index];
          }
          break;
        case 10003:
          if (formatMap['480p']) {
            info = resp.url_info[formatMap['480p'].index];
          }
          break;
        case 10004:
          if (formatMap['270p']) {
            info = resp.url_info[formatMap['270p'].index];
          }
          break;
        default:
          break;
      }
    }
    if (!info) {
      if (g.networkType === '2g' || resp.is_mp_video_urgent_state * 1 === 1) {
        if (formatMap['270p']) {
          info = resp.url_info[formatMap['270p'].index];
        } else if (formatMap['480p']) {
          info = resp.url_info[formatMap['480p'].index];
        }
      } else if (g.isPc || g.networkType === 'wifi') {
        if (formatMap['720p']) {
          info = resp.url_info[formatMap['720p'].index];
        } else if (formatMap['480p']) {
          info = resp.url_info[formatMap['480p'].index];
        }
      } else {
        if (formatMap['480p']) {
          info = resp.url_info[formatMap['480p'].index];
        } else if (formatMap['720p']) {
          info = resp.url_info[formatMap['720p'].index];
        }
      }
    }
    if (!info) {
      info = resp.url_info[0];
    }

    function degradeFormat(info) {
      var largerLine = Math.floor(Math.max(info.width, info.height));
      if (largerLine > 3841) {
        switch (info.format_id * 1) {
          case 10002:
            info = resp.url_info[formatMap['480p'].index];
            JsmonitorReport.setSum(27302, 6, 1);

            degradeFormat(info);
            break;
          case 10003:
            info = resp.url_info[formatMap['270p'].index];
            JsmonitorReport.setSum(27302, 7, 1);

            break;
        }
      }
      return info;
    }

    info = degradeFormat(info);

    var duration_s = Math.floor(info.duration_ms / 1000);

    var flow = (parseFloat(info.filesize) / 1024 / 1024).toFixed(2);

    return {
      formatid: info.format_id,
      time: duration_s,
      title: info.title || '',
      width: info.width,
      height: info.height,
      file_size: info.filesize,
      totalUrl: info.url,
      rate: Math.round(info.filesize / 1024 * 8 / duration_s),
      flow: flow,
      ori_url_info: resp.url_info
    };
  }

  function getMpVideoInfo(opt) {
    var retry = opt.retry || 1;
    var onSuccess = typeof opt.onSuccess === 'function' ? opt.onSuccess : function () {};
    var onError = function onError(obj) {
      if (obj && obj.code >= 80 && obj.code <= 85 && retry > 0) {
        retry--;
        doSend();
        return;
      }
      if (typeof opt.onError === 'function') {
        opt.onError(obj);
      }
    };
    var url = ['/mp/videoplayer?action=get_mp_video_play_url', '&preview=', opt.preview ? '1' : '0', '&__biz=', opt.__biz, '&mid=', opt.mid, '&idx=', opt.idx, '&vid=', opt.vid, opt.auto ? '&isauto=true' : ''].join('');
    getNetworkBeforeCallback(doSend);

    function doSend() {
      Ajax({
        'type': 'GET',
        'dataType': 'json',
        timeout: 30000,
        url: url,
        success: function success(resp) {
          if (resp && resp.base_resp && resp.base_resp.ret == 0) {
            var err_msg = '';
            var code = undefined;
            if (resp.is_mp_video_delete) {
              err_msg = '该视频已被发布者删除';
              code = 72;
            } else if (resp.is_mp_video_forbid) {
              err_msg = '该视频因违规已下架';
              code = 73;
            } else if (resp.is_mp_video_transing * 1 === 1) {
              err_msg = '正在转码，转码完成后可播放';
              code = 78;
            } else if (resp.is_mp_video_checking) {
              err_msg = '审核中';
              code = 75;
            } else if (resp.is_mp_video_check_fail) {
              err_msg = '审核失败';
              code = 76;
            } else if (resp.is_appmsg_unauthorized * 1 === 1) {
              err_msg = '该视频因未经授权使用而无法查看';
              code = 77;
            }
            if (err_msg && typeof code !== 'undefined') {
              onError({
                err_msg: err_msg,
                code: code
              });
              return;
            }

            if (resp.url_info && resp.url_info.length > 0) {
              onSuccess({
                data: formatMpVideoInfo(resp)
              });
              return;
            }
            onError({
              err_msg: g.defaultErrorWording,
              code: 71
            });
          } else {
            onError({
              err_msg: "当前视频不存在，暂无法观看",
              code: 74
            });
          }
        },
        error: function error(xhr) {
          var code = undefined;
          if (!xhr) {
            code = 80;
          } else if (xhr.status >= 200 && xhr.status < 400) {
            code = 81;
          } else if (xhr.status >= 400 && xhr.status < 500) {
            code = 82;
          } else if (xhr.status >= 500 && xhr.status < 600) {
            code = 83;
          } else if (xhr.status == 0 && xhr.readyState == 4) {
            code = 84;
          } else {
            code = 85;
          }
          onError({
            err_msg: g.defaultErrorWording,
            code: code
          });
        }
      });
    }
  }

  function getNetworkBeforeCallback(cb) {
    if (!g.networkType && Mmversion.isWechat && (Mmversion.isIOS || Mmversion.isAndroid)) {
      JSAPI.invoke('getNetworkType', {}, function (res) {
        g.networkType = g.netTypeMap[res.err_msg] || 'fail';
        if (res.err_msg == 'network_type:edge' || res.err_msg == 'network_type:wwan') {
          if (res.detailtype || res.subtype) {
            g.networkType = res.detailtype || res.subtype;
          }
        }
        typeof cb === 'function' && cb();
      });
    } else {
      typeof cb === 'function' && cb();
    }
  }

  function getQQVideoUrlInfo(opt) {
    var cid = 'video_dynamic_callback';
    var url = 'https://h5vv6.video.qq.com/getvinfo?vid=#vid#&dtype=1&otype=json&callback=#cid#&appVer=1&encryptVer=6.3&platform=61001&cKey=#ckey#&sdtfrom=#sdtfrom#&device=#device#&use_proxy_sdk=0';
    url = url.replace('#cid#', cid).replace('#vid#', opt.vid).replace('#ckey#', opt.ckey).replace('#sdtfrom#', Report.getsdtfrom()).replace('#device#', Report.getPlatformType());
    var time1 = Date.now();

    getNetworkBeforeCallback(doLoadScript);

    function doLoadScript() {
      loadscript({
        url: url,
        timeout: 30000,
        callbackName: cid,
        stateErrorCode: 417,
        callback: function callback(res) {
          var c_time = Date.now() - time1;
          res = res || {};
          if (typeof res.em === 'undefined') {
            res.em = 0;
          }
          var ret_code = res.em;
          var data = undefined;

          if (Url.getQuery('channel_session_id') && (res.em === 61 || res.em === 62)) {
            Ajax({
              'type': 'POST',
              'dataType': 'json',
              timeout: 30000,
              url: '/mp/videochannel_profile_page',
              data: {
                action: 'report_tx_video',
                vid: opt.vid,
                status: res.em
              },
              success: function success(resp) {
                console.log(resp);
              }
            });
          }
          if (res.em == 0) {
            if (res.exem > 0) {
              ret_code = -4;
            } else if (res.exem == 0 && res.vl && res.vl.vi && res.vl.vi[0] && res.vl.vi[0].st == 8) {
              if (res.preview > 0) {
                ret_code = -5;
              } else {
                ret_code = -3;
              }
            }
            if (ret_code == 0 && (!res.vl || !res.vl.vi || !res.vl.vi[0])) {

              ret_code = -2;
            }

            if (ret_code == 0) {
              var videoInfo = res.vl.vi[0];
              data = {
                newVid: videoInfo.lnk,
                time: Math.floor(videoInfo.td),
                title: videoInfo.ti,
                width: videoInfo.vw,
                height: videoInfo.vh,
                file_size: videoInfo.fs,
                rate: Math.round(videoInfo.fs / 1024 * 8 / videoInfo.td),
                flow: (parseFloat(videoInfo.fs) / 1024 / 1024).toFixed(2)
              };

              if (videoInfo.ul && videoInfo.ul.ui && videoInfo.ul.ui[0]) {
                var ui = videoInfo.ul.ui[0];
                var baseUrl = ui.url + videoInfo.fn;
                var fl = res.fl;
                var fmt = '';

                if (!!fl && fl.cnt > 0) {

                  data.formatid = 10003;
                  fmt = '高清';
                  data.resolution = '高清;(480P)'.replace(/^.*;\((:?.*)P\)$/, '$1') || 0;
                  data.format = fmt;
                  data.vt = ui.vt;

                  data.totalUrl = [baseUrl, baseUrl.indexOf('?') != -1 ? '&' : '?', 'vkey=', videoInfo.fvkey, '&sdtfrom=', Report.getsdtfrom(), '&type=', ui.dt == 1 ? 'tflv' : ui.dt == 2 || ui.dt == 0 ? 'mp4' : '', '&platform=', Report.getPlatformType(), '&fmt=', fmt, '&level=', videoInfo.level, '&br=', videoInfo.br, '&sp=', videoInfo.sp].join('');
                } else {

                  ret_code = -2;
                }
              }
            }

            if (ret_code == 0) {
              Report.getinfoReport({
                vid: opt.vid,
                val: c_time,
                val1: ret_code,
                vurl: data.totalUrl
              });
              opt.onSuc({
                data: data,
                oriData: res,
                c_time: c_time,
                ret_code: ret_code
              });
            } else {
              Report.getinfoReport({
                vid: opt.vid,
                val: c_time,
                val1: ret_code,
                vurl: ''
              });
              opt.onError(-2, {
                ret_code: ret_code,
                c_time: c_time,
                err_msg: getVinfoErrMsg(ret_code * 1, res.exem * 1, res)
              });
            }
          } else {
            opt.onError(ret_code, {
              ret_code: ret_code,
              c_time: c_time,
              err_msg: getVinfoErrMsg(ret_code)
            });
          }
        },
        onerror: function onerror(errcode) {
          var ret_code = undefined;
          var c_time = Date.now() - time1;
          switch (errcode * 1) {
            case 400:
              ret_code = -22;
              break;
            case 500:
              ret_code = -21;
              break;
            default:
              ret_code = -23;
              break;
          }
          if (typeof opt.onError === 'function') {
            opt.onError(ret_code, {
              ret_code: ret_code,
              c_time: c_time,
              err_msg: getVinfoErrMsg(-1)
            });
          }
          Report.getinfoReport({
            vid: opt.vid,
            val: c_time,
            val1: ret_code,
            vurl: ''
          });
        }
      });
    }
  }

  function getVinfoErrMsg(code1, code2) {
    var msg = '';
    switch (code1 * 1) {
      case -4:
        msg = "因版权限制，该视频不支持播放";break;
      case -5:
        msg = "因版权限制，该视频不支持播放";break;
      case -3:
        msg = "因版权限制，该视频不支持播放";break;
      case 61:
        msg = "当前视频不存在，暂无法观看";break;
      case 62:
        msg = "当前视频已下架，暂无法观看";break;
      case 63:
        msg = "视频加载失败，暂无法观看";break;
      case 65:
        msg = "视频加载失败，暂无法观看";break;
      case 67:
        msg = "视频加载失败，暂无法观看";break;
      case 69:
        msg = "视频格式不支持移动端观看，请在电脑上观看";break;
      case 71:
        msg = "视频加载失败，暂无法观看";break;
      case 73:
        msg = "视频加载失败，暂无法观看";break;
      case 74:
        msg = "视频加载失败，暂无法观看";break;
      case 80:
        switch (code2 * 1) {
          case 1:
            msg = "很抱歉，当前IP地址所在地区暂不支持播放";break;
          case 2:
            msg = "因版权限制，暂不支持播放";break;
          default:
            msg = "因版权限制，该视频不支持播放";break;
        }
        break;
      case 81:
        msg = "视频加载失败，暂无法观看";break;
      case 82:
        msg = "视频加载失败，暂无法观看";break;
      case 83:
        switch (code2 * 1) {
          case -1:
            msg = g.defaultErrorWording;break;
          case -2:
            msg = "因版权限制，该视频不支持播放";break;
          default:
            msg = "该片为付费视频，请前往腾讯视频观看";break;
        }
        break;
      case 84:
        msg = "很抱歉，根据您的IP地址，暂无法播放";break;
      default:
        msg = g.defaultErrorWording;break;
    }
    return msg;
  }

  function getQQVideoStaticInfo(opt) {
    var cid = 'video_static_callback';
    var url = 'https://h5vv.video.qq.com/getextinfo?otype=json&callback=' + cid + '&vid=' + opt.vid;
    loadscript({
      url: url,
      timeout: 30000,
      callbackName: cid,
      callback: function callback(res) {
        if (!res || res.s != 'o' || res.vl.cnt <= 0) {
          if (typeof opt.onError === 'function') {
            opt.onError(-1);
          }
          return;
        }

        var videoInfo = res.vl.vi[0];
        var data = {
          title: videoInfo.title || "视频",
          desc: videoInfo.desc * 1 === 0 ? '' : videoInfo.desc || '',
          director: videoInfo.director || '',
          leading_actor: videoInfo.leading_actor || '',
          costar: videoInfo.costar || '',
          time: Math.floor(videoInfo.td) || 0 // 视频时长, 与getvinfo接口保持一致，向下取整
        };
        if (!!videoInfo.pl && videoInfo.pl.cnt > 0) {
          var pi = videoInfo.pl.pi;
          data.p400_300 = pi[0] ? pi[0].url : '';
          data.p140_100 = pi[1] ? pi[1].url : '';
          data.p120_90 = pi[2] ? pi[2].url : '';

          data.p400_300 = !!data.p400_300 && data.p400_300.indexOf('http') == -1 ? 'http://' + data.p400_300 : data.p400_300;
          data.p140_100 = !!data.p140_100 && data.p140_100.indexOf('http') == -1 ? 'http://' + data.p140_100 : data.p140_100;
          data.p120_90 = !!data.p120_90 && data.p120_90.indexOf('http') == -1 ? 'http://' + data.p120_90 : data.p120_90;
        }
        opt.onSuc(data);
      },
      onerror: function onerror(errcode) {
        if (typeof opt.onError === 'function') {
          opt.onError(errcode);
        }
      }
    });
  }

  function getObjectFitSize() {
    var type = arguments.length <= 0 || arguments[0] === undefined ? 'cover' : arguments[0];
    var containerWidth = arguments[1];
    var containerHeight = arguments[2];
    var imgWidth = arguments[3];
    var imgHeight = arguments[4];

    var radio = 1,
        sx = 0,
        sy = 0,
        swidth = imgWidth,
        sheight = imgHeight,
        x = 0,
        y = 0,
        width = containerWidth,
        height = containerHeight;
    var cWHRatio = containerWidth / containerHeight;
    var iWHRatio = imgWidth / imgHeight;
    if (type === 'cover') {

      if (iWHRatio >= cWHRatio) {

        radio = containerHeight / imgHeight;
        sx = (imgWidth - containerWidth / radio) / 2;
        swidth = containerWidth / radio;
        sheight = imgHeight;
      } else {

        radio = containerWidth / imgWidth;
        sy = (imgHeight - containerHeight / radio) / 2;
        swidth = imgWidth;
        sheight = containerHeight / radio;
      }
    } else if (type === 'contain') {
      if (iWHRatio >= cWHRatio) {

        radio = containerWidth / imgWidth;
        y = (containerHeight - imgHeight * radio) / 2;
        height = imgHeight * radio;
      } else {

        radio = containerHeight / imgHeight;
        x = (containerWidth - imgWidth * radio) / 2;
        width = imgWidth * radio;
      }
    }
    return [sx, sy, swidth, sheight, x, y, width, height];
  }

  function getHashByVid(vid) {
    var hash_bucket = 10000 * 10000;
    var tot = 0;

    for (var i = 0, len = vid.length; i < len; i++) {
      tot = (tot << 5) + tot + vid.charCodeAt(i);
    }
    return tot % hash_bucket;
  }

  function getCoverByVid(vid, isMpVideo) {
    if (isMpVideo) {
      return '/mp/videoplayer?action=get_mp_video_cover&vid=' + vid;
    }
    return location.protocol + '//puui.qpic.cn/qqvideo/0/' + vid + '/0';
  }

  function getVideoInfoCache(biz, mid, idx, vid) {
    var data = LS.get(g.cachekey + vid);
    if (!data) {
      return null;
    }

    try {
      data = JSON.parse(data) || {};
      if (!data.time || Date.now() - g.cacheTime > data.time * 1) {
        clearVideoCache(vid);

        data.videoInfo = {
          status: getVideoStatusCache(biz, mid, idx, vid)
        };

        return data;
      }
    } catch (e) {
      clearVideoCache(vid);
      return null;
    }

    data = data.videoInfo ? data : { videoInfo: {} };
    data.videoInfo.status = getVideoStatusCache(biz, mid, idx, vid);

    return data.videoInfo ? data : null;
  }

  function getVideoStatusCache(biz, mid, idx, vid) {
    var data = LS.get(g.cachekey + biz + mid + idx + vid);
    if (!data) {
      return null;
    }

    try {
      data = JSON.parse(data) || {};
    } catch (e) {
      clearVideoStatusCache(biz, mid, idx, vid);
      return null;
    }

    return data;
  }

  function getPlayerStatusCache() {
    var data = LS.get(g.cachekey + 'playerStatus');

    if (!data) {
      return;
    }

    try {
      data = JSON.parse(data) || {};
    } catch (e) {
      clearVideoCache('playerStatus');
      return;
    }

    if (data.playerStatus) {
      g.playerStatus = data.playerStatus;
      Log.info('player controller: get player status cache ' + JSON.stringify(g.playerStatus));
    }
  }

  function cacheVideoInfo(biz, mid, idx, vid, videoInfo, time) {
    var data = {
      dynamicData: videoInfo.dynamicData || null,
      coverUrl: videoInfo.coverUrl || ''
    };
    LS.set(g.cachekey + vid, JSON.stringify({
      time: time || Date.now(),
      videoInfo: data
    }));
    if (videoInfo.status) {
      LS.set(g.cachekey + biz + mid + idx + vid, JSON.stringify(videoInfo.status));
    }
  }

  function cachePlayerStatus() {
    LS.set(g.cachekey + 'playerStatus', JSON.stringify({
      playerStatus: g.playerStatus
    }));

    JSAPI.invoke('handleMPPageAction', {
      action: 'setLocalData',
      key: 'formatId',
      data: String(g.playerStatus.formatId)
    }, function (res) {
      console.log('setLocalData' + JSON.stringify(res));
    });
    Log.info('player controller: set player status cache ' + JSON.stringify(g.playerStatus));
  }

  function clearVideoCache(vid) {
    LS.remove(g.cachekey + vid);
  }
  function clearVideoStatusCache(biz, mid, idx, vid) {
    LS.remove(g.cachekey + biz + mid + idx + vid);
  }

  function callWhenExtDone(callback) {
    if (window.ext_complete) {
      callback();
    } else {
      EventBus.on('ext-complete', callback);
    }
  }

  getNetworkBeforeCallback();

  getPlayerStatusCache();

  return {
    mpVideoPlayer: mpVideoPlayer,
    getFormatTime: Player._getFormatTime,
    getHashByVid: getHashByVid,
    getCoverByVid: getCoverByVid,
    getQQVideoStaticInfo: getQQVideoStaticInfo
  };
});
define("appmsg/without_iframe/video_appmsg.html.js",[],function(){
return'<div id="page-content">\n    <!--S 全屏播放 full_screen_mv-->\n    <div id="js_mpvedio_wrapper_<#=vid#>" style="position:relative; height: <#=video_h#>px">\n        <div class="add_bg_color appmsg_video">\n            <div id="js_video_tail_panel_<#=vid#>" class="video_tail_module video_screen_half" style="display: none;">\n                <div class="video_tail_module__hd" id="js_video_tail_hd">\n                    <div class="account_info_wrp">\n                        <div class="profile_info_wrp js_go_profile">\n                            <img class="account_avatar" src="" alt="" id="js_tail_panel_account_avatar">\n                            <div class="account_name" id="js_tail_panel_account_name"></div>\n                            <div class="subscription_info subscription_success">\n                                <div class="account_subscription_tips js_subscription_success" id="js_subscription_success"\n                                    style="display: none;">已关注</div>\n                                <i class="account_link_icon js_profile_icon" id="js_profile_icon"></i>\n                            </div>\n                        </div>\n                        <div class="btn_account_subscription js_btn_account_subscription" id="js_btn_account_subscription" style="display: none;">\n                            关注</div>\n                    </div>\n                    <div class="opr_wrp">\n                        <span class="opr_item_wrp js_replay" id="js_replay">\n                            <i class="opr_item refresh_icon"></i>\n                            <span class="opr_item_text">重播</span>\n                        </span>\n                        <span class="opr_item_wrp share_item_wrp js_share_button" id="js_tail_share_button"\n                            style="display: none;">\n                            <i class="opr_item share_icon"></i>\n                            <span class="opr_item_text">分享</span>\n                        </span>\n                        <!--点赞后 加className selected-->\n                        <span class="opr_item_wrp like_item_wrp" id="js_tail_like_button" style="display: none;">\n                            <i class="opr_item like_icon"></i>\n                            <span class="opr_item_text">赞</span>\n                        </span>\n                        <!-- <span class="opr_item_wrp recommend_item_wrp" id="js_tail_channel_button"\n                            style="display: none;">\n                            <i class="opr_item video-logo_icon"></i>\n                            <span class="opr_item_text">随便看看</span>\n                        </span> -->\n                    </div>\n                </div>\n\n                <!-- 有拓展内容 -->\n                <div class="have_expand" id="js_expand_area">\n                </div>\n\n                <!-- 广告内容 -->\n                <div class="ad_area" id="js_tail_video_ad_area">\n                </div>\n            </div>\n        </div>\n        <div id="js_vue_player_<#=index#>"></div>\n    </div>\n    <!--E 视频播放器-->\n    <!-- S 视频社交-->\n    <div id="bottom_bar" class="interact_video" style="display:none;height: 35px;">\n        <div class="inter_opr">\n            <a id="video_detail_btn" href="javascript:;" target="_blank" class="access_original">\n                视频详情            </a>\n        </div>\n    </div>\n</div>';
});;define('page/appmsg_new/mod/album_read.css', [], function(require, exports, module) {
	return ".wx_icon_pay_tag{color:#fff;background:#fa9d3b;border-radius:2px;font-size:10px;line-height:1;padding:3px 4px}.wx_icon_pay_tag_paid{color:#fa9d3b;background:rgba(250,157,59,0.2)}@media(prefers-color-scheme:dark){.wx_icon_pay_tag{background:#c87d2f}.wx_icon_pay_tag_paid{color:rgba(250,157,59,0.6);background:rgba(250,157,59,0.2)}}.album_read_card{overflow:hidden;margin-top:16px;font-size:14px;color:rgba(0,0,0,0.9);line-height:1.4}.album_read_card .weui-flex__item{min-width:0}.album_read_card .weui-btn__word-wrp{font-size:14px;color:rgba(0,0,0,0.5)}.album_read_card .weui-btn__word-wrp:before{content:\"\\00B7\";margin-left:2px}.album_read_hd{padding:18px 16px;-webkit-box-align:center;-webkit-align-items:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;justify-content:center;position:relative}.album_read_hd:active{opacity:.5}.album_read_source{width:auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-wrap:normal;color:rgba(0,0,0,0.5)}.album_read_source a:active{opacity:.5}.album_read_directory_access{color:#576b95;margin-left:24px}.album_read_directory_access:active{opacity:.5}.album_read_directory_access:before{content:\"\";display:inline-block;vertical-align:middle;font-size:10px;width:2em;height:2em;margin-top:-0.2em;-webkit-mask:url(\"data:image\/svg+xml;charset=utf8,%3Csvg xmlns='http:\/\/www.w3.org\/2000\/svg' width='20' height='20' viewBox='0 0 20 20'%3E  %3Cg fill='none' fill-rule='evenodd'%3E    %3Cpath fill='%23D8D8D8' d='M0 0h20v20H0z' opacity='0'\/%3E    %3Cpath fill='%23576B95' d='M14.8 13c.11 0 .2.09.2.2v.8a.2.2 0 0 1-.2.2H5.2A.2.2 0 0 1 5 14v-.8c0-.11.09-.2.2-.2h9.6zm0-4c.11 0 .2.09.2.2v.8a.2.2 0 0 1-.2.2H5.2A.2.2 0 0 1 5 10v-.8c0-.11.09-.2.2-.2h9.6zm0-4c.11 0 .2.09.2.2V6a.2.2 0 0 1-.2.2H5.2A.2.2 0 0 1 5 6v-.8c0-.11.09-.2.2-.2h9.6z'\/%3E  %3C\/g%3E%3C\/svg%3E\") no-repeat 50% 50%;mask:url(\"data:image\/svg+xml;charset=utf8,%3Csvg xmlns='http:\/\/www.w3.org\/2000\/svg' width='20' height='20' viewBox='0 0 20 20'%3E  %3Cg fill='none' fill-rule='evenodd'%3E    %3Cpath fill='%23D8D8D8' d='M0 0h20v20H0z' opacity='0'\/%3E    %3Cpath fill='%23576B95' d='M14.8 13c.11 0 .2.09.2.2v.8a.2.2 0 0 1-.2.2H5.2A.2.2 0 0 1 5 14v-.8c0-.11.09-.2.2-.2h9.6zm0-4c.11 0 .2.09.2.2v.8a.2.2 0 0 1-.2.2H5.2A.2.2 0 0 1 5 10v-.8c0-.11.09-.2.2-.2h9.6zm0-4c.11 0 .2.09.2.2V6a.2.2 0 0 1-.2.2H5.2A.2.2 0 0 1 5 6v-.8c0-.11.09-.2.2-.2h9.6z'\/%3E  %3C\/g%3E%3C\/svg%3E\") no-repeat 50% 50%;-webkit-mask-size:cover;mask-size:cover;background-color:currentColor}.album_read_nav_item{position:relative;text-align:center;padding:4px 24px 20px}.album_read_nav_item:before{content:\"\";position:absolute;top:4px;bottom:20px;left:0;width:1px;background:-webkit-linear-gradient(top,rgba(0,0,0,0.03),rgba(0,0,0,0.05) 50%,rgba(0,0,0,0.03) 100%)}.album_read_nav_item:active .album_read_nav_inner{opacity:.5}.album_read_nav_item.album_read_nav_prev{text-align:left}.album_read_nav_item.album_read_nav_next{text-align:right}.album_read_nav_item:first-child:before{display:none}.album_read_nav_item:first-child:last-child{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-align:center;-webkit-align-items:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;justify-content:center;padding-top:14px;padding-bottom:32px}.album_read_nav_item:first-child:last-child:before{top:14px;bottom:32px}.album_read_nav_item:first-child:last-child .album_read_nav_btn:before,.album_read_nav_item:first-child:last-child .album_read_nav_btn:after{display:none}.album_read_nav_item:first-child:last-child .album_read_nav_inner{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-align:center;-webkit-align-items:center;align-items:center}.album_read_nav_item:first-child:last-child .album_read_nav_inner:before,.album_read_nav_item:first-child:last-child .album_read_nav_inner:after{content:\"\";display:inline-block;vertical-align:middle;font-size:10px;margin-top:-1px;width:1em;height:2em;-webkit-mask-size:cover;mask-size:cover;background-color:currentColor;-webkit-mask-image:url(data:image\/svg+xml,%3Csvg%20width%3D%2212%22%20height%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M2.454%206.58l1.06-1.06%205.78%205.779a.996.996%200%20010%201.413l-5.78%205.779-1.06-1.061%205.425-5.425-5.425-5.424z%22%20fill%3D%22%23B2B2B2%22%20fill-rule%3D%22evenodd%22%2F%3E%3C%2Fsvg%3E);mask-image:url(data:image\/svg+xml,%3Csvg%20width%3D%2212%22%20height%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M2.454%206.58l1.06-1.06%205.78%205.779a.996.996%200%20010%201.413l-5.78%205.779-1.06-1.061%205.425-5.425-5.425-5.424z%22%20fill%3D%22%23B2B2B2%22%20fill-rule%3D%22evenodd%22%2F%3E%3C%2Fsvg%3E)}.album_read_nav_item:first-child:last-child.album_read_nav_prev .album_read_nav_inner:before{transform:matrix(-1,0,0,-1,0,0);-ms-transform:matrix(-1,0,0,-1,0,0);-webkit-transform:matrix(-1,0,0,-1,0,0);margin-right:8px}.album_read_nav_item:first-child:last-child.album_read_nav_prev .album_read_nav_inner:after{display:none}.album_read_nav_item:first-child:last-child.album_read_nav_next .album_read_nav_inner:before{display:none}.album_read_nav_item:first-child:last-child.album_read_nav_next .album_read_nav_inner:after{margin-left:8px}.album_read_nav_item:first-child:last-child .album_read_nav_title{-webkit-line-clamp:1;margin-top:0;-webkit-box-flex:1;-webkit-flex:1;flex:1}.album_read_nav_item:first-child:last-child .album_read_nav_title:before{content:\"\\00B7\";margin-left:4px;margin-right:4px}.album_read_nav_btn{display:block;color:rgba(0,0,0,0.9);font-weight:500}.album_read_nav_btn:before,.album_read_nav_btn:after{content:\"\";display:inline-block;vertical-align:middle;font-size:10px;margin-top:-0.2em;width:1em;height:2em;-webkit-mask-size:cover;mask-size:cover;background-color:currentColor;-webkit-mask-image:url(data:image\/svg+xml,%3Csvg%20width%3D%2212%22%20height%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M2.454%206.58l1.06-1.06%205.78%205.779a.996.996%200%20010%201.413l-5.78%205.779-1.06-1.061%205.425-5.425-5.425-5.424z%22%20fill%3D%22%23B2B2B2%22%20fill-rule%3D%22evenodd%22%2F%3E%3C%2Fsvg%3E);mask-image:url(data:image\/svg+xml,%3Csvg%20width%3D%2212%22%20height%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M2.454%206.58l1.06-1.06%205.78%205.779a.996.996%200%20010%201.413l-5.78%205.779-1.06-1.061%205.425-5.425-5.425-5.424z%22%20fill%3D%22%23B2B2B2%22%20fill-rule%3D%22evenodd%22%2F%3E%3C%2Fsvg%3E)}.album_read_nav_prev .album_read_nav_btn:before{transform:matrix(-1,0,0,-1,0,0);-ms-transform:matrix(-1,0,0,-1,0,0);-webkit-transform:matrix(-1,0,0,-1,0,0);margin-right:8px}.album_read_nav_prev .album_read_nav_btn:after{display:none}.album_read_nav_next .album_read_nav_btn:before{display:none}.album_read_nav_next .album_read_nav_btn:after{margin-left:8px}.album_read_nav_title{overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:2;margin-top:8px;line-height:1.2}.album_read_directory .weui-half-screen-dialog{padding:0;padding:0 constant(safe-area-inset-right) constant(safe-area-inset-bottom) constant(safe-area-inset-left);padding:0 env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left)}.album_read_directory .weui-half-screen-dialog__hd{padding-left:24px;padding-right:24px}.album_read_directory .weui-icon-close-thin{-webkit-mask-image:url(data:image\/svg+xml,%3Csvg%20width%3D%2212%22%20height%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M2.454%206.58l1.06-1.06%205.78%205.779a.996.996%200%20010%201.413l-5.78%205.779-1.06-1.061%205.425-5.425-5.425-5.424z%22%20fill%3D%22%23B2B2B2%22%20fill-rule%3D%22evenodd%22%2F%3E%3C%2Fsvg%3E);mask-image:url(data:image\/svg+xml,%3Csvg%20width%3D%2212%22%20height%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M2.454%206.58l1.06-1.06%205.78%205.779a.996.996%200%20010%201.413l-5.78%205.779-1.06-1.061%205.425-5.425-5.425-5.424z%22%20fill%3D%22%23B2B2B2%22%20fill-rule%3D%22evenodd%22%2F%3E%3C%2Fsvg%3E);-webkit-transform:rotate(90deg);transform:rotate(90deg);width:14px}.album_read_directory .weui-btn__word-wrp{font-size:14px}.album_read_title{color:#576b95}.album_read_directory_item{color:rgba(0,0,0,0.9);line-height:1.4;padding:24px 16px;position:relative}.album_read_directory_item:before{content:\" \";position:absolute;left:0;top:0;right:0;height:1px;border-top:1px solid rgba(0,0,0,0.1);-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(0.5);transform:scaleY(0.5);left:16px;right:16px}.album_read_directory_item:last-child:after{content:\" \";position:absolute;left:0;bottom:0;right:0;height:1px;border-bottom:1px solid rgba(0,0,0,0.1);-webkit-transform-origin:0 100%;transform-origin:0 100%;-webkit-transform:scaleY(0.5);transform:scaleY(0.5);left:16px;right:16px}.album_read_directory_item:active{background-color:rgba(0,0,0,0.05)}.album_read_directory_item .wx_icon_pay_tag{margin-left:8px;margin-top:-2px;display:inline-block;vertical-align:middle}.album_read_directory_current{background-color:rgba(0,0,0,0.05)}.album_read_directory_disabled{color:rgba(0,0,0,0.28)}@media(prefers-color-scheme:dark){.album_read_card{color:rgba(255,255,255,0.8)}.album_read_card .weui-btn__word-wrp{color:rgba(255,255,255,0.5)}.album_read_bd:before{border-top-color:rgba(255,255,255,0.05)}.album_read_directory_access{color:#7d90a9}.album_read_title{color:#7d90a9}.album_read_source{color:rgba(255,255,255,0.5)}.album_read_nav_item:before{background:-webkit-linear-gradient(top,rgba(255,255,255,0.03),rgba(255,255,255,0.05) 50%,rgba(255,255,255,0.03) 100%)}.album_read_nav_btn{color:rgba(255,255,255,0.8)}.album_read_directory_item{color:rgba(255,255,255,0.8)}.album_read_directory_item:before{border-top-color:rgba(255,255,255,0.05)}.album_read_directory_item:active{background-color:rgba(255,255,255,0.1)}.album_read_directory_item:last-child:after{border-bottom-color:rgba(255,255,255,0.05)}.album_read_directory_current{background-color:rgba(255,255,255,0.1)}.album_read_directory_disabled{color:rgba(255,255,255,0.24)}}";
});define("appmsg/more_read_tpl.html.js",[],function(){
return'<p class="read-more__desc">你还可以看</p>\n<div class="read-more__article__area">\n  <# list.forEach(function (item) { #>\n    <div class="read-more__article__item">\n      <a href="javascript:;" class="more_read_link"><#=item.title#></a>\n      <# if (item.fans_read_cnt > 0) { #>\n        <p class="read-more__article__extra"><#=item.fans_read_cnt#>位好友读过</p>\n      <# } #>\n    </div>\n  <# }); #>\n</div>';
});function _defineProperty(e,s,n){
return s in e?Object.defineProperty(e,s,{
value:n,
enumerable:!0,
configurable:!0,
writable:!0
}):e[s]=n,e;
}
var _extends=Object.assign||function(e){
for(var s=1;s<arguments.length;s++){
var n=arguments[s];
for(var _ in n)Object.prototype.hasOwnProperty.call(n,_)&&(e[_]=n[_]);
}
return e;
};
define("pages_new/common_share/video/store.js",["pages_new/3rd/vue.js","pages_new/3rd/vuex.js","pages_new/modules/utils/url.js","pages_new/common_share/video/lifecycle_manager.js","pages_new/common_share/video/player/player_store.js","pages_new/common_share/video/related_video_list/related_video_list_store.js","pages_new/common_share/video/like_and_share/like_and_share_store.js","pages_new/common_share/video/topic/topic_store.js","pages_new/modules/comment/comment_store.js","pages_new/modules/reward/reward_store.js","pages_new/common_share/video/player/plugins/danmu/danmu_store.js","pages_new/common_share/video/player/plugins/popup/popup_store.js","pages_new/common_share/video/player/plugins/mid_ad/mid_ad_store.js","pages_new/common_share/video/player/plugins/after_ad/after_ad_store.js","pages_new/common_share/video/player/plugins/auto_next/auto_next_store.js"],function(e){
"use strict";
function s(){
return _extends({},window.cgiData,{
uin:window.uin,
biz:window.biz,
appmsgid:window.appmsgid,
idx:window.idx,
scene:window.scene,
subscene:window.subscene,
enterid:window.enterid,
sessionid:window.sessionid,
channel_session_id:window.channel_session_id,
real_item_show_type:window.real_item_show_type,
item_show_type:window.item_show_type,
clientversion:window.clientversion,
devicetype:window.devicetype,
continueid:window.continueid,
continueseq:window.continueseq,
reloadid:window.reloadid,
reloadseq:window.reloadseq,
exptype:window.exptype,
expsessionid:window.expsessionid,
source:window.source,
is_temp_url:window.is_temp_url,
appmsg_like_type:window.appmsg_like_type,
pass_ticket:window.pass_ticket,
passparam:window.passparam,
wxtoken:window.wxtoken,
copyright_stat:window.copyright_stat,
need_pay:window.need_pay,
is_pay_subscribe:window.is_pay_subscribe,
msg_title:window.msg_title,
msg_desc:window.msg_desc,
ct:window.ct,
ori_send_time:window.ori_send_time,
msg_link:window.msg_link,
is_login:window.is_login,
user_uin:window.user_uin,
isprofileblock:window.isprofileblock,
round_head_img:window.round_head_img,
kanyikan_video_educate_pic:window.kanyikan_video_educate_pic,
kanyikan_educate_pic:window.kanyikan_educate_pic,
appmsg_type:window.appmsg_type,
send_time:window.send_time,
isPaySubscribe:window.isPaySubscribe,
defaultAvatarUrl:window.defaultAvatarUrl
});
}
function n(){
y.forEach(function(e){
return x.registerModule(e.name,e);
});
}
function _(){
y.forEach(function(e){
return x.unregisterModule(e.name);
});
}
function i(){
j.forEach(function(e){
return x.registerModule([l.name,e.name],e);
});
}
function o(){
j.forEach(function(e){
return x.unregisterModule([l.name,e.name]);
});
}
function a(){
_(),o(),x.commit(u.SET_CGI_DATA,s()),x.commit(u.SET_URL_PARAMS,w.getParams()),n(),
i();
}
function t(e){
x.commit(u.SET_CGI_DATA,s()),x.commit(u.SET_URL_PARAMS,w.getParams()),e&&(n(),i());
}
function r(){
x.commit(u.SET_EXT_RES,{}),x.commit(u.SET_AD_RES,{}),x.commit(u.SET_CGI_DATA,{}),
x.commit(u.SET_URL_PARAMS,{});
}
var d,p=e("pages_new/3rd/vue.js"),m=e("pages_new/3rd/vuex.js"),w=e("pages_new/modules/utils/url.js"),c=e("pages_new/common_share/video/lifecycle_manager.js");
p.use(m);
var u={
SET_EXT_RES:"SET_EXT_RES",
SET_AD_RES:"SET_AD_RES",
SET_CGI_DATA:"SET_CGI_DATA",
SET_URL_PARAMS:"SET_URL_PARAMS",
SET_PRAISE_NUM:"SET_PRAISE_NUM",
SET_RECOMMEND_NUM:"SET_RECOMMEND_NUM",
SET_RECOMMEND_STATUS:"SET_RECOMMEND_STATUS",
SET_PRAISE_STATUS:"SET_PRAISE_STATUS",
SET_SUBSCRIBE_STATUS:"SET_SUBSCRIBE_STATUS",
SET_PUBLIC_RELATED_VIDEO:"SET_PUBLIC_RELATED_VIDEO"
},l=e("pages_new/common_share/video/player/player_store.js"),g=e("pages_new/common_share/video/related_video_list/related_video_list_store.js"),S=e("pages_new/common_share/video/like_and_share/like_and_share_store.js"),E=e("pages_new/common_share/video/topic/topic_store.js"),T=e("pages_new/modules/comment/comment_store.js"),f=e("pages_new/modules/reward/reward_store.js"),y=[g,S,E,T,f],R=e("pages_new/common_share/video/player/plugins/danmu/danmu_store.js"),A=e("pages_new/common_share/video/player/plugins/popup/popup_store.js"),h=e("pages_new/common_share/video/player/plugins/mid_ad/mid_ad_store.js"),v=e("pages_new/common_share/video/player/plugins/after_ad/after_ad_store.js"),P=e("pages_new/common_share/video/player/plugins/auto_next/auto_next_store.js"),j=[R,A,h,v,P],x=new m.Store({
modules:_defineProperty({},l.name,l),
state:{
extRes:{},
adRes:{},
cgiData:{},
urlParams:{}
},
mutations:(d={},_defineProperty(d,u.SET_EXT_RES,function(e,s){
e.extRes=s;
}),_defineProperty(d,u.SET_AD_RES,function(e,s){
e.adRes=s;
}),_defineProperty(d,u.SET_CGI_DATA,function(e,s){
e.cgiData=s;
}),_defineProperty(d,u.SET_URL_PARAMS,function(e,s){
e.urlParams=s;
}),_defineProperty(d,u.SET_PRAISE_NUM,function(e,s){
e.extRes.appmsgstat&&e.extRes.appmsgstat.old_like_num&&(e.extRes.appmsgstat.old_like_num=s.praiseNum);
}),_defineProperty(d,u.SET_RECOMMEND_NUM,function(e,s){
e.extRes.appmsgstat&&e.extRes.appmsgstat.like_num&&(e.extRes.appmsgstat.like_num=s.recommendNum);
}),_defineProperty(d,u.SET_RECOMMEND_STATUS,function(e,s){
e.extRes.appmsgstat&&(e.extRes.appmsgstat.liked=s.hasRecommended?1:0);
}),_defineProperty(d,u.SET_PRAISE_STATUS,function(e,s){
e.extRes.appmsgstat&&(e.extRes.appmsgstat.old_liked=s.hasPraised?1:0);
}),_defineProperty(d,u.SET_SUBSCRIBE_STATUS,function(e,s){
e.extRes.is_fans=s.hasSubscribed?1:0;
}),_defineProperty(d,u.SET_PUBLIC_RELATED_VIDEO,function(e,s){
e.cgiData.isPublicRelatedVideo=s.isPublicRelatedVideo;
}),d)
});
return c.register({
getData:a,
init:t,
destroy:r
}),x;
});var _extends=Object.assign||function(n){
for(var e=1;e<arguments.length;e++){
var t=arguments[e];
for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);
}
return n;
};
define("appmsg/comment/comment_report.js",["common/comm_report.js"],function(n){
"use strict";
var e=n("common/comm_report.js"),t=void 0;
switch(1*window.item_show_type){
case 5:
t=1;
break;

case 7:
t=2;
break;

case 8:
t=3;
break;

case 10:
t=4;
break;

case 0:
case 9:
case 11:
default:
t=0;
}
return{
report22214:function(n){
return function(t){
return e.report(22214,_extends({},n,t));
};
}({
BizUin:window.biz||"",
AppMsgId:window.parseInt(window.mid,10)||0,
AppMsgItemIdx:window.parseInt(window.idx,10)||0,
Scene:t,
EnterId:window.parseInt(window.enterid,10)||0,
CommentId64Bit:window.parseInt(window.comment_id,10)||0
}),
report22215:function(n){
return function(t){
return e.report(22215,_extends({},n,t));
};
}({
BizUin:window.biz||"",
AppMsgId:window.parseInt(window.mid,10)||0,
AppMsgItemIdx:window.parseInt(window.idx,10)||0,
Scene:t,
EnterId:window.parseInt(window.enterid,10)||0,
CommentId64Bit:window.parseInt(window.comment_id,10)||0
})
};
});function _typeof(e){
return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":typeof e;
}
function _classCallCheck(e,t){
if(!(e instanceof t))throw new TypeError("Cannot call a class as a function");
}
var _createClass=function(){
function e(e,t){
for(var n=0;n<t.length;n++){
var i=t[n];
i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i);
}
}
return function(t,n,i){
return n&&e(t.prototype,n),i&&e(t,i),t;
};
}();
define("appmsg/emotion/emotion_panel.js",["widget/wx-widget/wx_emotion_panel.css","biz_wap/jsapi/core.js","biz_common/dom/event.js","biz_common/utils/emoji_panel_data.js","biz_common/utils/emoji_data.js","biz_wap/utils/mmversion.js","appmsg/emotion/selection.js","appmsg/comment/comment_input/comment_input.js"],function(require,exports,module,alert){
"use strict";
require("widget/wx-widget/wx_emotion_panel.css");
var JSAPI=require("biz_wap/jsapi/core.js"),DomEvent=require("biz_common/dom/event.js"),panelData=require("biz_common/utils/emoji_panel_data.js"),emojiData=require("biz_common/utils/emoji_data.js"),mmversion=require("biz_wap/utils/mmversion.js"),Selection=require("appmsg/emotion/selection.js"),CommentInput=require("appmsg/comment/comment_input/comment_input.js"),emotionPanelList=[],EmotionPanel=function(){
function EmotionPanel(e){
switch(_classCallCheck(this,EmotionPanel),this.isShow=!1,this.opt=e,this.__bindEvent(),
e.type){
case"contenteditable":
this.valueKey="innerHTML",this.lastRange=null,this.__bindContenteditableEvent();
break;

default:
this.valueKey="value";
}
this.limit=e.limit,mmversion.isAndroid&&this.__initEmojiPanel(),emotionPanelList.push(this);
}
return _createClass(EmotionPanel,[{
key:"show",
value:function(){
var e=this;
this.isShow||(mmversion.isIOS?JSAPI.invoke("showSmileyPanel",{
hidden:!1,
duration:.01
},function(t){
/:ok$/.test(t.err_msg)&&(e.isShow=!0,"function"==typeof e.opt.onShow&&e.opt.onShow(t.height));
}):(this.opt.input.blur(),JSAPI.invoke("handleDeviceInfo",{
action:"hideKeyBoard"
},function(){}),setTimeout(function(){
e.panel.style.display="",e.isShow=!0,"function"==typeof e.opt.onShow&&e.opt.onShow(e.panel.offsetHeight);
},200)));
}
},{
key:"hide",
value:function(){
var e=this;
this.isShow&&(mmversion.isIOS?JSAPI.invoke("showSmileyPanel",{
hidden:!0
},function(t){
/:ok$/.test(t.err_msg)&&(e.isShow=!1,"function"==typeof e.opt.onHide&&e.opt.onHide());
}):(this.panel.style.display="none",this.isShow=!1,"function"==typeof this.opt.onHide&&this.opt.onHide(),
JSAPI.invoke("handleDeviceInfo",{
action:"hideKeyBoard"
},function(){})));
}
},{
key:"toggle",
value:function(){
this[this.isShow?"hide":"show"]();
}
},{
key:"setLimit",
value:function(e){
this.limit=e;
}
},{
key:"restoreRange",
value:function(){
if(this.lastRange)if("contenteditable"===this.opt.type){
var e=Selection.getSelection(),t=document.createRange();
t.setStart(this.lastRange.endContainer,this.lastRange.endOffset),t.setEnd(this.lastRange.endContainer,this.lastRange.endOffset),
e.removeAllRanges(),e.addRange(t);
}else{
var e=Selection.getSelection();
if(e.addRange)e.removeAllRanges(),e.addRange(this.lastRange);else{
var t=Selection.getRange();
t.setEndPoint&&(t.setEndPoint("EndToEnd",this.lastRange),t.setEndPoint("StartToStart",this.lastRange)),
t.select();
}
}else if("contenteditable"===this.opt.type){
var e=Selection.getSelection();
e.selectAllChildren(this.opt.input),e.collapseToEnd();
}else{
var n=this.opt.input,i=n.value.length;
n.setSelectionRange(i,i);
}
this.__saveRange();
}
},{
key:"__bindEvent",
value:function(){
var e=this;
DomEvent.on(this.opt.input,"touchstart",function(){
e.hide();
});
}
},{
key:"__bindContenteditableEvent",
value:function(){
var e=this;
DomEvent.on(this.opt.input,"input",function(){
e.__saveRange();
}),DomEvent.on(this.opt.input,"keyup",function(){
e.__saveRange();
}),DomEvent.on(this.opt.input,"mouseup",function(){
e.__saveRange();
});
var t=null;
DomEvent.on(this.opt.input,"paste",function(){
t&&clearTimeout(t),t=setTimeout(function(){
Selection.setCursorToEnd(CommentInput.FilterNode(e.opt.input,!0)),e.__saveRange();
},10);
});
}
},{
key:"__saveRange",
value:function(e){
this.lastRange=e||Selection.getRange();
}
},{
key:"__getContent",
value:function(e,t){
return this.opt.input[this.valueKey].substring(e,t);
}
},{
key:"__setInputValue",
value:function(e,t){
var n=this,i=this.opt.input;
if(this.opt.vueOpt){
var o=this.opt.vueOpt;
o.instance[o.key]=e,o.instance.$nextTick(function(){
n.__setSelectionRange(t);
});
}else i[this.valueKey]=e,this.__setSelectionRange(t);
}
},{
key:"__setSelectionRange",
value:function(e){
var t=this.opt.input;
if("contenteditable"===this.opt.type){
var n=(e||t.childNodes.length-1+"_").split("_").map(function(e,n,i){
return 1===n&&""===e?t.childNodes[1*i[0]].nodeValue.length:+e;
});
this.__saveRange({
endContainer:t.childNodes[n[0]],
endOffset:n[1]
});
}else t.setSelectionRange(e,e);
}
},{
key:"__insertContent",
value:function(e){
var t=this;
if(this.opt.input){
var n=this.opt.input,i="",o="",a=void 0,s=void 0;
"contenteditable"===this.opt.type?!function(){
var l=-1;
Array.prototype.forEach.call(n.childNodes,function(e,n){
t.lastRange?-1===l?e===t.lastRange.endContainer?1===e.nodeType?(l=n+1,i+=e.outerHTML):(l=n,
i+=e.nodeValue.slice(0,t.lastRange.endOffset),o+=e.nodeValue.slice(t.lastRange.endOffset)):i+=1===e.nodeType?e.outerHTML:e.nodeValue:o+=1===e.nodeType?e.outerHTML:e.nodeValue:i+=1===e.nodeType?e.outerHTML:e.nodeValue;
}),a=i+e+o,s=t.lastRange&&-1!==l?l+"_"+(t.lastRange.endOffset+e.length):"";
}():(i=this.__getContent(0,n.selectionStart),o=this.__getContent(n.selectionEnd),
a=i+e+o,s=n.selectionStart+e.length);
var l=this.opt.counter?this.opt.counter(a):a.length;
if(0!==this.limit&&l>this.limit)return;
this.__setInputValue(EmotionPanel.__filterContent(a),s);
}
}
},{
key:"__delContent",
value:function(){
var e=this;
if(this.opt.input){
var t=this.opt.input,n="",i="";
if("contenteditable"===this.opt.type){
var o=function(){
var o=-1;
if(e.lastRange?Array.prototype.some.call(t.childNodes,function(t){
return o++,t===e.lastRange.endContainer?!0:!1;
}):o=t.childNodes.length-1,-1===o)return{
v:void 0
};
var a=t.childNodes[o];
if(1===a.nodeType)if(t.removeChild(a),0===t.childNodes.length)e.lastRange=null;else{
var s=o,l=void 0;
o?(s--,l=3===t.childNodes[s].nodeType?t.childNodes[s].nodeValue.length:0):l=0,e.__saveRange({
endContainer:t.childNodes[s],
endOffset:l
});
}else{
var r=a.nodeValue;
if(r){
if(0===o&&0===e.lastRange.endOffset)return{
v:void 0
};
e.lastRange?(n=r.slice(0,e.lastRange.endOffset),i=r.slice(e.lastRange.endOffset)):(n=r,
i="");
var u=EmotionPanel.__delEmojiText(n,i),l=void 0;
null===u.value?(l=e.lastRange.endOffset-1,a.nodeValue=n.substring(0,n.length-1)+i):(l=e.lastRange.endOffset-u.length,
a.nodeValue=u.value),e.__saveRange({
endContainer:t.childNodes[o],
endOffset:l
});
}else if(o){
t.removeChild(a);
var c=t.childNodes[o-1];
e.__saveRange({
endContainer:c,
endOffset:3===c.nodeType?c.nodeValue.length:0
}),e.__delContent();
}
}
}();
if("object"===("undefined"==typeof o?"undefined":_typeof(o)))return o.v;
}else{
n=this.__getContent(0,t.selectionStart),i=this.__getContent(t.selectionEnd);
var a=void 0,s=void 0;
if(t.selectionStart===t.selectionEnd){
var l=EmotionPanel.__delEmojiText(n,i);
null===l.value?(a=n.substring(0,n.length-1)+i,s=t.selectionStart-1):(a=l.value,s=t.selectionStart-l.length);
}else a=n+i,s=t.selectionStart;
this.__setInputValue(EmotionPanel.__filterContent(a),s);
}
}
}
},{
key:"__initEmojiPanel",
value:function(){
for(var e=this,t=16,n=7,i=34,o=[],a={},s=[],l=0;l<panelData.length;l++)for(var r=0;r<emojiData.length;r++)if(emojiData[r].id===panelData[l]){
s[l]=emojiData[r];
break;
}
for(var l=0;n>l;l++)for(var r=0;t>r;r++){
var u=l*t+r;
s[u]&&o.push({
name:s[u].style,
title:s[u].emoji?s[u].emoji:s[u].cn,
bp:"background-position: 0 -"+u*i+"px;",
id:s[u].id
});
}
for(var l=0;l<s.length;l++)a[s[l].style]=s[l].emoji||s[l].cn;
var c=document.createDocumentFragment();
this.panel=document.createElement("ul"),this.panel.className="comment_primary_emotion_list_mobile comment__emoji__panel",
this.panel.style.display="none",c.appendChild(this.panel),o.forEach(function(t,n){
var i=document.createElement("li"),o=document.createElement("span");
i.className="comment_primary_emotion_item js_emotion_item",i.setAttribute("data-index",n),
o.className="comment_primary_emotion",o.setAttribute("style",t.bp),o.setAttribute("text-name",t.name),
o.setAttribute("role","button"),o.setAttribute("title",t.title),i.appendChild(o),
e.panel.appendChild(i);
}),document.body.appendChild(this.panel);
var h=void 0;
DomEvent.on(this.panel,"touchstart",function(e){
h=e.changedTouches[0].clientY;
}),DomEvent.on(this.panel,"touchmove",function(t){
var n=t.changedTouches[0].clientY,i=e.panel.scrollTop,o=e.panel.scrollHeight,a=e.panel.clientHeight;
(.5>i&&n>h||.5>o-i-a&&h>n)&&t.preventDefault(),"function"==typeof e.opt.onTouchmove&&e.opt.onTouchmove(t);
}),DomEvent.on(this.panel,"click",function(t){
if(console.log("click",t),"comment_primary_emotion"===t.target.className){
var n=t.target.getAttribute("text-name"),i=a[n];
i&&e.__insertContent(i),"function"==typeof e.opt.onChange&&e.opt.onChange({
type:"emotion",
value:n,
text:i
});
}
});
}
}],[{
key:"__filterContent",
value:function(e){
var t=e;
return t;
}
},{
key:"__getEmojiText",
value:function __getEmojiText(emoji){
for(var i=0;i<emojiData.length;i++){
var e=emojiData[i];
switch(emoji){
case e.cn:
return e.emoji||e.cn;

case e.hk:
return e.emoji||e.hk;

case e.us:
return e.emoji||e.us;

case e.emoji:
return e.emoji;

case e.code:
return e.emoji||e.cn;

default:
if(!mmversion.isIOS&&e.code.startsWith("\\ue"))try{
var c=eval("'"+e.code+"'");
if(emoji===c)return e.emoji||e.cn;
}catch(err){}
}
}
return"";
}
},{
key:"__delEmojiText",
value:function(e,t){
for(var n=null,i=0;i<emojiData.length;i++){
var o=emojiData[i];
if(o.cn&&e.endsWith(o.cn)){
n=o.cn.length;
break;
}
if(o.hk&&e.endsWith(o.hk)){
n=o.hk.length;
break;
}
if(o.us&&e.endsWith(o.us)){
n=o.us.length;
break;
}
if(o.emoji&&e.endsWith(o.emoji)){
n=o.emoji.length;
break;
}
}
return{
value:null===n?null:e.substring(0,e.length-n)+t,
length:n
};
}
}]),EmotionPanel;
}();
return mmversion.isIOS&&!function(){
var e=function(e,t,n){
"function"==typeof n&&n(),"function"==typeof e.opt.onChange&&e.opt.onChange(t);
};
JSAPI.on("onGetSmiley",function(t){
emotionPanelList.some(function(n){
if(n.isShow){
switch(t.smiley){
case"[DELETE_EMOTION]":
e(n,{
type:"action",
value:"del"
},function(){
n.__delContent();
});
break;

case"[DONE_EMOTION]":
e(n,{
type:"action",
value:"done"
},function(){
n.isShow=!1;
});
break;

default:
var i=EmotionPanel.__getEmojiText(t.smiley);
e(n,{
type:"emotion",
value:t.smiley,
text:i
},function(){
i&&n.__insertContent(i);
});
}
return!0;
}
return!1;
});
});
}(),EmotionPanel;
});function _classCallCheck(e,t){
if(!(e instanceof t))throw new TypeError("Cannot call a class as a function");
}
var _createClass=function(){
function e(e,t){
for(var n=0;n<t.length;n++){
var i=t[n];
i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i);
}
}
return function(t,n,i){
return n&&e(t.prototype,n),i&&e(t,i),t;
};
}();
define("common/fixed_input.js",["biz_common/dom/event.js"],function(e){
"use strict";
var t=e("biz_common/dom/event.js"),n=function(){
function e(n){
var i=this;
switch(_classCallCheck(this,e),this.hackStatus=!0,n.type){
case"contenteditable":
this.valueKey="innerHTML";
break;

default:
this.valueKey="value";
}
this.input=n.input,this.placeholder=this.input.cloneNode(),this.placeholder.removeAttribute("id"),
this.placeholder.style.display="none","function"==typeof n.onCreate&&n.onCreate(this.placeholder),
t.on(this.input,"focus",function(e){
if(i.hackStatus){
var t=i.input.scrollTop;
i.input.style.padding=0,i.input.style.height=0,i.placeholder.style.display="",i.placeholder.scrollTop=t,
setTimeout(function(){
i.input.style.removeProperty("padding"),i.input.style.removeProperty("height"),i.placeholder.style.display="none";
},300);
}
"function"==typeof n.onFocus&&n.onFocus(e);
}),t.on(this.input,"input",function(e){
i.placeholder[i.valueKey]=i.input[i.valueKey],"function"==typeof n.onInput&&n.onInput(e);
}),this.input.insertAdjacentElement("afterend",this.placeholder);
}
return _createClass(e,[{
key:"setInput",
value:function(e){
this.input[this.valueKey]=e,this.setPlaceholder(e);
}
},{
key:"setPlaceholder",
value:function(e){
this.placeholder[this.valueKey]=e;
}
},{
key:"enableHack",
value:function(){
this.hackStatus=!0;
}
},{
key:"disableHack",
value:function(){
this.hackStatus=!1;
}
}]),e;
}();
return n;
});define("appmsg/comment/comment_length.js",["pages/utils.js","biz_wap/utils/mmversion.js","biz_wap/utils/device.js"],function(e){
"use strict";
var t=e("pages/utils.js"),i=e("biz_wap/utils/mmversion.js"),s=e("biz_wap/utils/device.js"),n=i.is_wxwork,r=s.os.pc&&!n;
return{
remindWordCount:10,
getLength:function(e){
return e=t.trim(e),r&&(e=e.replace(/<br\/>/g,"").replace(/\n/g,"")||""),Math.ceil(e.replace(/[^\x00-\xff]/g,"**").length/2);
},
getLimit:function(e){
return"comment"===e?600:140;
}
};
});function _classCallCheck(t,e){
if(!(t instanceof e))throw new TypeError("Cannot call a class as a function");
}
var _createClass=function(){
function t(t,e){
for(var n=0;n<e.length;n++){
var i=e[n];
i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i);
}
}
return function(e,n,i){
return n&&t(e.prototype,n),i&&t(e,i),e;
};
}();
define("appmsg/comment/comment_input/comment_input.js",["biz_common/dom/event.js","pages/utils.js","appmsg/emotion/selection.js","common/utils.js","appmsg/emotion/dom.js","biz_wap/utils/device.js","biz_wap/utils/mmversion.js","biz_common/tmpl.js","appmsg/comment/comment_input/comment_input.html.js","appmsg/emotion/emotion_pc.js","appmsg/emotion/emotion.js"],function(t){
"use strict";
var e=t("biz_common/dom/event.js"),n=t("pages/utils.js"),i=t("appmsg/emotion/selection.js"),o=t("common/utils.js"),s=t("appmsg/emotion/dom.js"),a=t("biz_wap/utils/device.js"),m=t("biz_wap/utils/mmversion.js"),l=t("biz_common/tmpl.js"),r=t("appmsg/comment/comment_input/comment_input.html.js"),u=a.os.pc&&!m.is_wxwork,d=t(u?"appmsg/emotion/emotion_pc.js":"appmsg/emotion/emotion.js").Emotion,c="comment_primary_counter_warn",p="comment_primary_input_editing",h=o.getInnerHeight(),g=function(t,e){
for(var n=["&#96;","`","&#39;","'","&quot;",'"',"&nbsp;"," ","&gt;",">","&lt;","<","&yen;","¥","&amp;","&"],i=["&","&amp;","¥","&yen;","<","&lt;",">","&gt;"," ","&nbsp;",'"',"&quot;","'","&#39;","`","&#96;"],o=e?i:n,s=0;s<o.length;s+=2)t=t.replace(new RegExp(o[s],"g"),o[s+1]);
return t;
},v=function(){
function t(e){
var i=this;
_classCallCheck(this,t),this.type=e.type||"comment",this.placeholder=e.placeholder,
this.length=e.length,this.onChange=e.onChange,this.onSubmit=e.onSubmit,this.onShow=e.onShow,
this.onHide=e.onHide,this.onBlur=e.onBlur,this.onClick=e.onClick,this.dom={},this.renderEl=null,
this.target=null,this.value="",this.lastRange=null,this.isShow=!1,this.params=null;
var o=document.createElement("div");
o.innerHTML=l.tmpl(r,{
deviceIsPc:u,
placeholder:this.placeholder,
submitText:e.submitText,
length:this.length,
iconEmotionSwitch:window.icon_emotion_switch,
iconEmotionSwitchActive:window.icon_emotion_switch_active,
iconEmotionSwitchPrimary:window.icon_emotion_switch_primary,
iconEmotionSwitchActivePrimary:window.icon_emotion_switch_active_primary
},!1);
var a=n.qs(".js_wrp",o);
this.dom={
wrp:a,
input:n.qs(".js_input",a),
placeholder:n.qs(".js_placeholder",a),
emotionWrp:n.qs(".js_emotion_wrp",a),
submit:n.qs(".js_submit",a),
counter:n.qs(".js_counter",a),
counterLen:n.qs(".js_counter_len",a)
},document.body.appendChild(a),this.emotion=new d(u?{
emotionSwitch:this.dom.emotionWrp,
input:this.dom.input,
submit:this.dom.submit,
tool:n.qs(".js_tool",a),
onSelect:function(t){
i.insertHTML('<img src="/mpres/zh_CN/htmledition/comm_htmledition/images/pic/common/pic_blank.gif" class="icon_emotion_single '+t.name+'" alt="mo-'+t.title+'">'),
i.emotion.emotionPanelMove();
}
}:{
emotionPanel:s(n.qs(".js_emotion_panel")),
inputArea:s(this.dom.input),
emotionPanelArrowWrp:s(n.qs(".js_emotion_panel_arrow_wrp")),
emotionSwitcher:s(this.dom.emotionWrp),
emotionSlideWrapper:s(n.qs(".js_slide_wrapper")),
emotionNavBar:s(n.qs(".js_navbar")),
submitBtn:s(this.dom.submit),
inputEmotion:function(){
i.dom.submit.disabled=0===n.trim(i.dom.input.value).length;
}
}),this.bindEvent();
}
return _createClass(t,[{
key:"bindEvent",
value:function(){
var o=this;
e.tap(this.dom.submit,function(t){
t.preventDefault(),"function"==typeof o.onSubmit&&o.onSubmit(o.params);
}),u?!function(){
a.os.Mac&&e.on(window,"blur",function(){
o.dom.input&&"none"!==o.dom.input.display&&""!==o.dom.input.innerHTML&&o.blur();
}),e.on(o.dom.input,"focus",function(){
o.dom.wrp.classList.add(p);
}),e.on(o.dom.input,"blur",function(){
o.dom.wrp.classList.remove(p);
}),e.on(o.dom.input,"input",function(){
o.inputHandler();
}),e.tap(o.dom.input,function(){
o.emotion.hide(),"function"==typeof o.onClick&&o.onClick();
}),e.on(o.dom.input,"keyup",function(){
o.saveRange(),o.save();
}),e.on(o.dom.input,"keydown",function(t){
return 13===t.keyCode?(o.saveRange(),o.insertHTML("<br/>"),o.saveRange(),!1):!0;
}),e.on(o.dom.input,"mouseup",function(){
o.saveRange(),o.save();
});
var s=null;
e.on(o.dom.input,"paste",function(){
s&&clearTimeout(s),s=setTimeout(function(){
return i.setCursorToEnd(t.FilterNode(o.dom.input,!0)),o.saveRange(),o.save(),!1;
},10);
}),e.on(document,"click",function(t){
if(o.isShow){
var e=t.target;
n.isParent(e,o.target)||n.isParent(e,o.dom.wrp)||""!==n.trim(o.dom.input.innerHTML)?!o.emotion.isShow||n.isParent(e,o.emotion.dom.emotionPanel)||n.isParent(e,o.dom.emotionWrp)||o.emotion.hide():o.hide();
}
},!1);
}():!function(){
var t=["“”","‘’","（）","《》","〈〉","「」","『』","〔〕","【】","［］","[]","｛｝","{}","()","<>"],i=!1;
e.on(o.dom.input,"input",function(e){
o.dom.submit.disabled=0===n.trim(o.dom.input.value).length,a.os.ios&&e.data&&t.indexOf(e.data)>-1&&(i=!0);
}),a.os.ios&&(e.on(o.dom.input,"click",function(){
i&&(o.blur(),o.focus(),i=!1),"function"==typeof o.onClick&&o.onClick();
}),window.__second_open__&&e.on(o.dom.input,"blur",function(){
"function"==typeof o.onBlur&&o.onBlur();
}));
}();
}
},{
key:"inputHandler",
value:function(){
var t=this.dom.input.innerHTML;
""===t||"<br>"===t?(this.dom.placeholder.style.display="",this.dom.input.innerHTML=""):this.dom.placeholder.style.display="none";
}
},{
key:"show",
value:function(t){
var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];
t!==this.renderEl&&("append"===e.renderType?t.appendChild(this.dom.wrp):t.insertAdjacentElement("afterend",this.dom.wrp),
this.renderEl=t),this.target=e.target||t,void 0!==e.placeholder&&e.placeholder!==this.placeholder&&(this.dom.placeholder.innerHTML=e.placeholder,
this.placeholder=e.placeholder),this.params=e.params||null,this.dom.wrp.style.display="";
var n=this.dom.wrp.getBoundingClientRect();
n.top+n.height>=h&&window.scrollTo(0,window.scrollY+n.height),this.dom.input.innerHTML=e.text||"",
this.isShow=!0,u&&(this.inputHandler(),this.lastRange=null,this.save()),this.focus(),
"function"==typeof this.onShow&&this.onShow(t,this.dom.input);
}
},{
key:"hide",
value:function(){
this.isShow=!1,this.dom.wrp.style.display="none",this.emotion.hide(),"function"==typeof this.onHide&&this.onHide(this.target,this.params),
this.params=null;
}
},{
key:"focus",
value:function(){
this.dom.input.focus();
}
},{
key:"blur",
value:function(){
this.dom.input.blur();
}
},{
key:"hideEmotionPannel",
value:function(){
this.emotion.hidePannel();
}
},{
key:"getInput",
value:function(){
return this.dom.input;
}
},{
key:"getSubmit",
value:function(){
return this.dom.submit;
}
},{
key:"saveRange",
value:function(){
this.lastRange=i.getRange();
}
},{
key:"restoreRange",
value:function(){
if(this.lastRange){
var t=i.getSelection();
if(t.addRange)t.removeAllRanges(),t.addRange(this.lastRange);else{
var e=i.getRange();
e.setEndPoint&&(e.setEndPoint("EndToEnd",this.lastRange),e.setEndPoint("StartToStart",this.lastRange)),
e.select();
}
}
}
},{
key:"save",
value:function(){
if(document.execCommand("AutoUrlDetect",!1,!1),this.value=this.emotion.textFilter(g(this.getAfterFilterNodeHtml())),
u){
var t=n.trim(this.value).replace(/(<br\/>)|\n/g,"").length;
this.dom.counterLen.innerText=t,t>this.length?(this.dom.counter.style.display="",
this.dom.counter.classList.add(c),this.dom.submit.disabled=!0):1>t?(this.dom.counter.style.display="none",
this.dom.counter.classList.remove(c),this.dom.submit.disabled=!0):t>=this.length-10?(this.dom.counter.style.display="",
this.dom.counter.classList.remove(c),this.dom.submit.disabled=!1):(this.dom.counter.style.display="none",
this.dom.counter.classList.remove(c),this.dom.submit.disabled=!1);
}
"function"==typeof this.onChange&&this.onChange(this.renderEl,this.dom.input);
}
},{
key:"insertHTML",
value:function(t){
this.focus(),this.dom.input.scrollTop=this.dom.input.scrollHeight,this.restoreRange();
var e=i.getRange();
if(e){
if(e.createContextualFragment){
t+='<img style="width:1px;height:1px;"></img>';
var n=e.createContextualFragment(t),o=n.lastChild,s=i.getSelection();
e.deleteContents(),e.insertNode(n),e.setStartBefore(o),e.setEndAfter(o),s.removeAllRanges(),
s.addRange(e),document.execCommand("Delete",!1,null);
}else e.pasteHTML&&t&&(e.pasteHTML(t),e.select(),e.collapse&&e.collapse(!1));
this.saveRange(),this.save();
}
}
},{
key:"getAfterFilterNodeHtml",
value:function(){
var e=document.createElement("div");
return e.innerHTML=this.dom.input.innerHTML,t.FilterNode(e),e.innerHTML;
}
}],[{
key:"FilterNode",
value:function(t,e){
for(var n=null,i=t.childNodes.length-1;i>=0;i--){
var o=t.childNodes[i];
switch(o.nodeType){
case 1:
var s=o.nodeName.toUpperCase();
if("BR"!==s){
var a=void 0,m=!1;
if("IMG"===s&&o.classList.contains("icon_emotion_single")?a=o:(a=o.textContent||o.innerText||"",
m=!0),a){
var l=m?document.createTextNode(a):a;
e&&!n&&(n=l),t.replaceChild(l,o);
}else t.removeChild(o);
}
break;

case 3:
break;

default:
t.removeChild(o);
}
}
return e?n:void 0;
}
}]),t;
}();
return v;
});function _classCallCheck(t,e){
if(!(t instanceof e))throw new TypeError("Cannot call a class as a function");
}
var _extends=Object.assign||function(t){
for(var e=1;e<arguments.length;e++){
var o=arguments[e];
for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i]);
}
return t;
},_createClass=function(){
function t(t,e){
for(var o=0;o<e.length;o++){
var i=e[o];
i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i);
}
}
return function(e,o,i){
return o&&t(e.prototype,o),i&&t(e,i),e;
};
}();
define("appmsg/comment/comment_dialog/comment_dialog.js",["biz_common/dom/event.js","pages/utils.js","biz_wap/utils/ajax.js","biz_common/utils/url/parse.js","biz_wap/utils/mmversion.js","biz_wap/utils/jsmonitor_report.js","pages/mod/bottom_modal.js","appmsg/comment/comment_list/comment_list.js","biz_common/tmpl.js","appmsg/comment/comment_dialog/c2c_not_support_dialog.html.js","appmsg/comment/comment_dialog/comment_dialog.html.js","biz_wap/utils/device.js","pages/scrollY.js","appmsg/set_font_size.js","appmsg/comment/comment_report.js"],function(t){
"use strict";
var e=t("biz_common/dom/event.js"),o=t("pages/utils.js"),i=t("biz_wap/utils/ajax.js"),n=t("biz_common/utils/url/parse.js"),a=t("biz_wap/utils/mmversion.js"),s=t("biz_wap/utils/jsmonitor_report.js"),l=t("pages/mod/bottom_modal.js"),p=t("appmsg/comment/comment_list/comment_list.js"),c=t("biz_common/tmpl.js"),r=t("appmsg/comment/comment_dialog/c2c_not_support_dialog.html.js"),d=t("appmsg/comment/comment_dialog/comment_dialog.html.js"),m=t("biz_wap/utils/device.js"),u=t("pages/scrollY.js"),y=t("appmsg/set_font_size.js"),g=t("appmsg/comment/comment_report.js"),_=g.report22214,h=m.os.pc,f=10,L="https://itunes.apple.com/cn/app/id414478124?mt=8&ls=1",v="https://support.weixin.qq.com/update/",D="page_no_scroll",b="weui-half-screen-dialog_headline",j=function(t){
return window.weui.alert(t,{
className:"weui-pop-zindex-primary"
});
},k=function(){
function t(e){
_classCallCheck(this,t),this.initDialog(e),this.initNotSupportDialog();
}
return _createClass(t,[{
key:"initDialog",
value:function(t){
var i=this;
this.globalData=t.globalData,this.replyData={},this.myId2ContentIdMap={},this.replyListData=null,
this.cmtData=null,this.onGetReplyList=t.onGetReplyList;
var n=document.createElement("div");
n.innerHTML=c.tmpl(d,{
deviceIsPc:h
});
var s=o.qs(".js_bd",n),r=function(){
i.replyListData&&i.replyListData.continue_flag&&i.getReplyList({
success:function(t){
i.replyList.add({
data:t,
type:"reply",
cmtData:i.cmtData
}),i.ending&&(i.ending.style.display=i.replyListData.continue_flag?"none":""),i.dialog.finishPullUpLoad();
},
getNextPage:!0
});
},m=function(){
i.replyListData.scrollTop=i.getScrollTop(),i.replyListData.exposedStatus={
comment:[],
reply:[]
},[i.commentList.getItemList(),i.replyList.getItemList()].forEach(function(t,e){
var o=i.replyListData.exposedStatus[e?"reply":"comment"];
t.forEach(function(t){
t.isExposed&&o.push(t.dataset[e?"replyId":"contentId"]);
});
}),i.replyListData=null,i.cmtData=null,i.dialog.finishPullUpLoad(),o.enableSelect();
};
this.dialogTop=-1,this.dialogBottom=-1,this.canCheckExposedStatus=!1;
var u=null,g=null;
if(h)!function(){
n=o.qs(".js_comment_dialog_pc",n),document.body.appendChild(n);
var t=o.qs(".js_bd_main",s),a=!1;
i.dialog={
pullingUpLock:!1,
show:function(){
n.style.display="",document.body.classList.add(D),i.canCheckExposedStatus=!0,i.checkExposedStatus();
},
hide:function(){
m(),n.style.display="none",document.body.classList.remove(D);
},
scrollTo:function(){
s.scrollTo.apply(s,arguments);
},
getScrollEle:function(){
return s;
},
finishPullUpLoad:function(){
this.pullingUpLock=!1;
},
checkReachBoundary:function(){
a&&0!==s.scrollTop||(a=!0,setTimeout(function(){
a=!1;
},50),setTimeout(function(){
!i.dialog.pullingUpLock&&s.scrollTop+s.offsetHeight+100>t.offsetHeight&&(r(),i.dialog.pullingUpLock=!0);
},100));
}
},e.on(o.qs(".js_close",n),"click",function(){
i.hideDialog();
}),e.on(s,"scroll",function(){
i.dialog.checkReachBoundary(),i.checkExposedStatus();
});
}();else{
this.dialog=new l(s,{
top:"16px",
title:"留言",
extClass:"discuss_more_dialog_wrp weui-half-screen-dialog_wrp",
scroll2Hide:!0,
sideslip2Hide:!0,
onPullUpLoad:r,
onHide:m,
onShowAfterAnimation:function(){
i.canCheckExposedStatus=!0,i.checkExposedStatus();
},
onScroll:function(){
i.dialog.contentArea.classList[i.dialog.contentAreaWrp.scrollTop>0?"add":"remove"](b),
i.checkExposedStatus();
}
});
var _=o.qs(".js_reply_btn",s);
this.replyWrp=_.parentNode,u=function(){
i.replyWrp.style.display="none";
},g=function(){
i.replyWrp.style.display="";
},e.on(_,"click",function(t){
!i.globalData.isVoiceover&&u(),i.commentList.commentReply("comment",i.commentList.getItemList()[0],i.commentList.data[0],null,t.target.classList.contains("js_emotion_btn"));
}),y.onFontScaleChange(function(){
return i.setBdPaddingBottom();
}),a.isIOS&&e.on(document,"visibilitychange",function(){
"hidden"===document.visibilityState&&i.dialog.hide(!0);
});
}
this.bd=s,this.loading=o.qs(".js_loading",s),this.ending=o.qs(".js_end",s),this.empty=o.qs(".js_empty",s),
this.placeholder=o.qs(".js_placeholder",s),this.commentList=new p({
globalData:t.globalData,
container:o.qs(".js_comment_list",s),
type:"comment",
canAddComment:t.canAddComment,
onPraise:function(t,e,o,n,a){
i.globalData.cmtList.setLikeInfo({
type:t,
contentId:e,
likeStatus:n,
likeNum:a,
force:!0
});
},
onRender:function(){
i.replyListData&&i.replyListData.exposedStatus&&!function(){
var t=i.replyListData.exposedStatus.comment;
i.commentList.getItemList().forEach(function(e){
t.indexOf(e.dataset.contentId)>-1&&(e.isExposed=!0);
});
}(),i.checkExposedStatus();
},
onRemove:function(t,e){
i.globalData.cmtList.remove({
type:t,
contentId:e
});
},
onEmpty:function(){
i.hideDialog();
},
onKeyboardShow:u,
onKeyboardHide:g,
onCanNotReply:g
}),this.replyList=new p({
globalData:t.globalData,
container:o.qs(".js_reply_list",s),
type:"reply",
canAddComment:t.canAddComment,
onPraise:function(t,e,o,n,a){
i.globalData.cmtList.setLikeInfo({
type:t,
contentId:e,
replyId:o,
likeStatus:n,
likeNum:a
});
},
onRender:function(){
i.replyListData&&i.replyListData.exposedStatus&&!function(){
var t=i.replyListData.exposedStatus.reply;
i.replyList.getItemList().forEach(function(e){
t.indexOf(e.dataset.replyId)>-1&&(e.isExposed=!0);
});
}(),i.checkExposedStatus();
},
onAdd:function(t,e,o,n){
i.globalData.cmtList.updateReplyLen({
newCnt:i.cmtData.reply_new.reply_total_cnt,
contentId:n
}),i.checkExposedStatus();
},
onRemove:function(t,e,o){
var n=i.cmtData.reply_new.reply_total_cnt;
i.globalData.cmtList.remove({
type:t,
contentId:e,
replyId:o.reply_id
}),i.cmtData.reply_new.reply_total_cnt=n,i.globalData.cmtList.updateReplyLen({
newCnt:n,
contentId:e
}),i.checkExposedStatus(),i.dialog.checkReachBoundary(!1,!0);
},
onEmpty:function(t){
"reply"===t&&(i.empty.style.display="");
},
onKeyboardShow:u,
onKeyboardHide:g,
onCanNotReply:g
});
}
},{
key:"showDialog",
value:function(t,e){
var i=this;
o.disableSelect(),this.cmtData=t;
var n=t.content_id;
this.replyListData=this.replyData[n]||null,this.getReplyList({
success:function(){
var t=i.replyListData.reply_list;
t.length?(i.empty.style.display="none",i.replyList.render(t,i.cmtData),i.ending&&(i.ending.style.display=i.replyListData.continue_flag?"none":"")):i.empty.style.display="",
i.dialog.scrollTo(0,i.replyListData.scrollTop||0),setTimeout(function(){
i.dialog.finishPullUpLoad();
},300);
},
topReplyId:e
}),this.commentList.render([t]),this.placeholder&&(this.placeholder.innerHTML="回复 "+p.sliceNickname(t.nick_name)+"："),
this.dialog.show(),this.setBdPaddingBottom();
}
},{
key:"hideDialog",
value:function(){
this.dialog.hide();
}
},{
key:"setAriaHidden",
value:function(t){
this.dialog.setAriaHidden(t);
}
},{
key:"addReply",
value:function(t){
var e=t.data,o=t.mode,i=void 0===o?"push":o,n=t.replyId,a=this.replyListData.reply_list,s=0;
n&&!a.some(function(t){
return s++,t.reply_id===n;
})&&(s=-1),this.replyListData.reply_list="push"===i?s>0&&s<a.length?a.slice(0,s).concat(e,a.slice(s)):a.concat(e):s>0&&s<=a.length?a.slice(0,s-1).concat(e,a.slice(s-1)):e.concat(a);
}
},{
key:"addReplyAndRender",
value:function(t){
this.addReply(t),this.replyList.add({
data:t.data,
mode:t.mode,
type:"reply",
cmtData:this.cmtData,
pos:t.replyId
});
}
},{
key:"removeReply",
value:function(t){
var e=this.replyListData.reply_list,o=-1;
e.some(function(e){
return o++,e.reply_id===t;
})&&e.splice(o,1);
}
},{
key:"getReplyList",
value:function(t){
var e=this,o=t.success,a=t.getNextPage,s=void 0===a?!1:a,l=t.cmtData,p=void 0===l?this.cmtData:l,c=t.topReplyId,r=p.content_id;
new Promise(function(t,o){
var a=!0;
if(s||(null!==e.replyListData?(a=!1,t()):e.replyData[r]&&(e.replyListData=e.replyData[r],
a=!1,t())),a){
e.loading.style.display="",!s&&e.replyList.empty();
var l={
action:"getcommentreply",
appmsgid:window.appmsgid,
idx:window.idx,
comment_id:e.globalData.commentId,
content_id:r,
id:p.id,
limit:f,
offset:s?e.replyListData.offset:0,
max_reply_id:s?e.replyListData.max_reply_id:p.reply_new.max_reply_id
};
void 0!==c&&(l.top_reply_id=c),i({
url:n.join("/mp/appmsg_comment",l,!0),
dataType:"json",
success:function(i){
if(i&&i.base_resp&&0===i.base_resp.ret){
var n=i.reply_list||{
reply_list:[]
};
s&&void 0!==e.replyListData.topReplyId&&(c=e.replyListData.topReplyId),void 0!==c&&(n.reply_list=n.reply_list.filter(function(t,e){
return!s&&0===e||t.reply_id!==c;
})),s?_extends(e.replyListData,{
max_reply_id:n.max_reply_id,
reply_list:e.replyListData.reply_list.concat(n.reply_list),
continue_flag:i.continue_flag,
offset:e.replyListData.offset+f
}):(n.continue_flag=i.continue_flag,n.offset=f,void 0!==c&&(n.topReplyId=c),e.replyData[r]=n,
e.myId2ContentIdMap[p.my_id]=r,e.replyListData=n),t(n.reply_list),"function"==typeof e.onGetReplyList&&e.onGetReplyList(r,n.reply_list);
}else o();
},
error:function(t){
console.error(t),o();
},
complete:function(){
e.loading.style.display="none";
}
});
}
}).then(o,function(){
j("系统错误，请稍后重试");
});
}
},{
key:"setReplyLikeInfo",
value:function(t){
var e=t.contentId,o=t.replyId,i=t.myId,n=t.likeStatus,a=t.likeNum;
void 0===e&&(e=this.myId2ContentIdMap[i]);
var s=this.replyData[e];
if(s){
var l=p.getDataByKey(s.reply_list,"reply_id",o);
l&&(l.reply_like_status=n,"number"!=typeof a&&(a=l.reply_like_num+(n?1:-1)),l.reply_like_num=a);
}
}
},{
key:"scrollY",
value:function(t,e){
var o={
el:this.dialog.contentAreaWrp,
y:t
};
e?o.speed=300:o.duration=.3,u.start(o);
}
},{
key:"setMarginBottom",
value:function(t){
this.bd.style.marginBottom=t+"px";
}
},{
key:"checkExposedStatus",
value:function(){
var t=this;
if(this.canCheckExposedStatus){
if(-1===this.dialogTop||-1===this.dialogBottom){
var e=this.dialog.getScrollEle().getBoundingClientRect();
this.dialogTop=e.top,this.dialogBottom=e.bottom;
}
[this.commentList.getItemList(),this.replyList.getItemList()].forEach(function(e,o){
var i=t[o?"replyList":"commentList"];
e.some(function(e){
if(!e.isExposed){
var o=e.getBoundingClientRect(),n=.5*o.height;
if(o.bottom>t.dialogTop+n&&o.top<t.dialogBottom-n){
e.isExposed=!0;
var a=e.dataset,s={
PersonalCommentId:1*a.myId,
ReplyId:0,
IsPopup:1,
IsReplyOther:0,
CommentReplyType:1
};
if(a.replyId){
var l=i.getData({
type:"reply",
contentId:a.contentId,
replyId:1*a.replyId
});
s.ReplyId=l.reply_id,s.IsReplyOther=l.to_nick_name&&l.to_content?1:0;
}
_(s);
}else if(o.top>=t.dialogBottom-n)return!0;
}
return!1;
});
});
}
}
},{
key:"getScrollTop",
value:function(){
return this.dialog.getScrollEle().scrollTop;
}
},{
key:"setBdPaddingBottom",
value:function(){
this.replyWrp&&(this.bd.style.paddingBottom=this.replyWrp.offsetHeight+"px");
}
},{
key:"initNotSupportDialog",
value:function(){
var t=this,i=document.createElement("div");
i.innerHTML=c.tmpl(r,{
comment_c2c_not_support_img:window.comment_c2c_not_support_img
});
var n=o.qs(".js_bd",i),p=o.qs(".js_ft",i);
this.notSupportDialog=new l(n,{
top:"16px",
hasHeader:!1,
footerEl:p,
extClass:"weui-half-screen-dialog_wrp"
}),i=null,e.tap(o.qs(".js_close",p),function(){
t.notSupportDialog.hide();
}),e.tap(o.qs(".js_update",p),function(){
s.setSum(110809,52,1),o.jumpUrl(a.isIOS?L:v,!0),t.notSupportDialog.hide();
});
}
},{
key:"showNotSupportDialog",
value:function(){
this.notSupportDialog.show();
}
}]),t;
}();
return k;
});